[["index.html", "GEOG0114: Principles of Spatial Analysis (2023/24) Welcome Structure Moodle Module tutors and contacts for GEOG0114", " GEOG0114: Principles of Spatial Analysis (2023/24) Welcome Welcome to GEOG0114: Principles of Spatial Analysis, one of the core 1st term modules for this MSc programme (Social and Geographic Data Science). This module has been designed as an introduction to the core tenets and principles of spatial analysis. Here, you will learn the key concepts and spatial analytical methods, which are applicable to the domains of social science and geography. In the first three weeks, we will cover Spatial analysis for data science, Graphical representation of spatial data and Spatial autocorrelation. Afterwards, in week 4, 5 and 6, we will cover a variety of basic geostatistical techniques that require analysis of point and raster data - these include suitability mapping such as Analytical Hierarchical Process (AHP) and Ecological Niche Modelling; and then Geostatistical analysis using Kriging. In week 7, 8, 9 and 10, we will learn specialised tools for performing spatial analysis on vector data (e.g., point, line and areal structures)- these include Network Analysis, Geodemographics, as well as spatial regression models approaches such as Geographical Weighted Regression (GWR) and Spatial Lag &amp; Error models. All these tutorials will be covered in RStudio. Structure All lectures and computer practicals will be delivered in-person. All Lectures are held on Monday from 04:00pm to 05:00pm at the North West Wing (Room 305). All computer lab seminars are delivered on Thursday from 12:00pm to 02:00pm at the North West Wing (Room G07). IMPORTANT NOTE: Please bring your own laptops with you to the computer practicals and technical support sessions on Monday and Thursday, respectively Moodle Moodle is the central point of your learning experience for GEOG0114. Please use it on a regular basis to check for updates concerning the schedule for weekly topics, access to the practical materials and assessment. However, note that all lecture notes, videos, practical materials including reading lists and downloadable data sets will be hosted on this webpage. You can download the lecture notes and data sets for the practical lesson from the table below. Week Downloads Topics 1 Slides; Data Spatial analysis for data science 2 Slides; Data Graphical representation of spatial data 3 Slides; Data Spatial autocorrelation 4 Slides; Data Suitability mapping I 5 Slides; Data Suitability mapping II Reading Week 6 Slides; Data Geostatistics using Kriging 7 Geodemographics 8 Transport network analysis 9 [Slides]; Data Spatial models I 10 [Slides] Spatial models II Solution codes: [Week 1] | [Week 2] | [Week 3] | [Week 4] | [Week 5] | [Week 6] | [Week 9] | [Week 10] IMPORTANT NOTE: All materials (including lecture slides, recordings, data sets for practical &amp; reading list etc.) for Week 7 and 8 are hosted on an alternative page Link. Week 10’s computer practical uses the dataset provided in Week 9’s session. Module tutors and contacts for GEOG0114 Feel free to contact us via email for help, or book appointments for additional support if need be. We are based at UCL Department of Geography, North West Wing building. Our contact information and office details are: Name Email Room number Anwar Musah a.musah@ucl.ac.uk 115 Justin van Dijk j.t.vandijk@ucl.ac.uk 118 "],["reading-list-for-geog0114-202324.html", "Reading List for GEOG0114 2023/24 Week 1: Spatial analysis for data science Week 2: Graphical representation of spatial data Week 3: Spatial autocorrelation Week 4: Suitability Mapping (Part 1) Week 5: Suitability Mapping (Part 2) Week 6: Geostatistical Modelling Week 9: Spatial Models (Part 1) Week 10: Spatial Models (Part 2)", " Reading List for GEOG0114 2023/24 Contact me via email (a.musah@ucl.ac.uk) if you are having problems securing one or any of these recommended books from the UCL library or elsewhere. Week 1: Spatial analysis for data science Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; Systems (4th Edition); Chapters 2: The Nature of Geographic Data Click link (Note: use of your UCL login via institutional organisation (UK Federation) is required to access the digital book) Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; Systems (4th Edition); Chapters 3: Representing Geography Click link (Note: use of your UCL login via institutional organisation (UK Federation) is required to access the digital book) Book: [R Programming] Brunsdon, C. et al (2018) An Introduction to R for Spatial Analysis and Mapping; Chapter 3: Basics of Handling Spatial Data in R Click link (Note: Books can be borrowed from UCL’s Library) Book: [R Programming] Dorman, M. (2014) Learning R for Geospatial Analysis; Chapter 1: The R Environment Click link (Note: Digital book) Book: [R Programming] Dorman, M. (2014) Learning R for Geospatial Analysis; Chapter 3: Working with tables Click link (Note: Digital book) Paper: [R Programming] Tennekes, M. (2018). tmap: Thematic Maps in R. Journal of Statistical Software, 84(6), 1–39. https://doi.org/10.18637/jss.v084.i06 (Download) Week 2: Graphical representation of spatial data Gitbook: [R Programming] Gimond, M. (2021) Intro to GIS and spatial analysis. Chapter 8: Spatial operations and vector overlays Click link Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; systems, Chapter 13: Spatial Analysis Click link Gitbook: [R Programming] Lovelace, R., Nowosad, J. and Muenchow, J. (2021) Geocomputation with R, Chapter 4: Spatial data operations Click link Gitbook: [R Programming] Lovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 5: Geometry operations Click link Paper: [Research] Bijnens, E. et al (2020). Residential green space and child intelligence and behavior across urban, suburban, and rural areas in Belgium: A longitudinal birth cohort study of twins. PLOS Medicine 17(8), e1003213. Click link Week 3: Spatial autocorrelation Gitbook: [R Programming] Gimond, M. (2021) Intro to GIS and spatial analysis. Chapter 13: Spatial autocorrelation Click link Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; systems (4th Edition); Chapter 2: The Nature of Geographic Data Click link Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; systems (4th Edition); Chapter 13: Spatial Analysis Click link Paper: [Research] Radil, S. 2016. Spatial analysis of crime. In: Huebner, B. and Bynum, T. The Handbook of Measurement Issues in Criminology and Criminal Justice, Chapter 24, pp.536-554. Click link (Note: use of your UCL login via institutional organisation (UK Federation) is required to access the digital paper) Book: [R Programming] Brunsdon, C. et al (2018) An Introduction to R for Spatial Analysis and Mapping; Chapter 7: Spatial Attribute Analysis with R, (See pages 257 to 262) Click link (Note: Books can be borrowed from UCL’s Library) Book: [R Programming] Brunsdon, C. et al (2018) An Introduction to R for Spatial Analysis and Mapping; Chapter 8: Localised Spatial Analysis, (See pages 281 to 289) Click link (Note: Books can be borrowed from UCL’s Library) Book: [Theory] Lloyd, C.D., et al (2010) Spatial Data Analysis: An Introduction for GIS Users; Chapter 4: Key concepts 3 - Spatial Data Analysis, (See pages 43 to 64) Book: [Theory] Lloyd, C.D., et al (2010) Spatial Data Analysis: An Introduction for GIS Users; Chapter 8: Local Univariate Measures, (See section 8.4.1. [Local Spatial Autocorrelation] on pages 110 to 113) Week 4: Suitability Mapping (Part 1) Paper: [Theory] R.W. Saaty (1987). The Analytical Hierarchy Process - What it is and how it is used, Mathl Modelling, Volume 9(3-5), pages 161 to 176 Click link Technical Document: [Theory] IDRISI Kilimanjaro: Guide to GIS and Image Processing. Chapter 12: Decision Support - Decision Strategy Analysis, Section on ‘A Typology of Decisions’, pages 151 to 154. Click link Paper: [Application] A.A. Ali, A. Ahmad (2019). Spatial susceptibility analysis of vector-borne diseases in KMC using geospatial technique and MCDM approach, Modeling Earth Systems and Environment, Issue 5, pages 1135–1159 Click link Paper: [Application] X. Zhao et al., (2020). Malaria Risk Map Using Spatial Multi-Criteria Decision Analysis along Yunnan Border During the Pre-elimination Period, Am J Trop Med Hyg, Volume 103 (2), pages 793–809 Click link Paper: [Application] B. Ahmed (2015). Landslide susceptibility mapping using multi-criteria evaluation techniques in Chittagong Metropolitan Area, Bangladesh. Landslides, Issue 12, pages 1077–1095 Click link Book: [R Programming] Dorman, M. (2014) Learning R for Geospatial Analysis; Chapter 3: Working with Rasters Click link (Note: Digital book) Week 5: Suitability Mapping (Part 2) Book: [R Programming] Dorman, M. (2014) Learning R for Geospatial Analysis; Chapter 3: Working with Rasters Click link (Note: Digital book) Book: [Theory] Stockwell, D. (2019) Niche Modeling: Predictions from Statistical Distributions; Chapter 4: Topology; CRC Press; pages: 45-63. Online: [Tutorials] Hijmans, R.J., &amp; Elith, J. (2021) Species distribution modelling Click link Online: [Tutorials] Kerkhoff, D. (2016) Ecological Responses to Climate Change: Species Distribution Modelling using Maxent Click link Online: [Tutorials] Dennis, M. (2020) Practical 4: Species Distribution Modelling I Click link Paper: [Application] Escobar, L.E., (2020). Ecological Niche Modeling: An Introduction for Veterinarians and Epidemiologists, Frontiers in Veterinary Science Click link Paper: [Application] Banks, W.E., (2017). The application of ecological niche modeling methods to archaeological data in order to examine culture-environment relationships and cultural trajectories; Quarternaire Click link Paper: [Application] Liao, Y., Lei, Y., Ren, Z., Chen, H., &amp; Li., D., (2017). Predicting the potential risk area of illegal vaccine trade in China; Scientific Reports, Issue 7, 3883. Click link Week 6: Geostatistical Modelling Technical Document: [R Programming] Gurpreet Singh and Biju Soman, (2020), Spatial Interpolation using Kriging in R. Download here Technical Document: [R Programming] Fernando Antonanzas-Torres, (2014), Geostatistics examples in R: Ordinary Kriging, Universal Kriging and Inverse Distance Weighted. Download here Technical Document: [R Programming] Adela Volfova and Martin Smejkal, (2012), Geostatistical Methods in R. Download here Book: [R Programming] Roger S. Bivand, Edzer J. Pebesma and Virgilio Gomez-Rubio, (2008), Applied Spatial Data Analysis with R, Chapter 8: Interpolation and Geostatistics, pages 191 to 235. Book: [R Programming] Michael Dorman, (2014), Learning R for Geospatial Analysis, Chapter 8: Spatial Interpolation of Point Data, pages 241 to 279. Click link (Note: Digital book) Book: [Theory] Christopher D. Lloyd, (2010), Spatial Data Analysis: An Introduction for GIS Users, Chapter 9: Spatial Interpolation (Section 9.7. Ordinary Kriging), pages 140 to 150. Week 9: Spatial Models (Part 1) Paper: [Application] Guangqing Chi and Jun Zhu (2008) Spatial Regression Models for Demographic Analysis, Popul Res Policy Rev, 27:17-42. DOI 10.1007/s11113-007-9051-8 Book Chapter: [Theory] David Darmofal, (2015), Chapter Six: Spatial Lag and Spatial Error Models (2015). Social Analysis for the Social Sciences. Cambridge Press Gain Access to PDF via Institutional login Paper: [Application] Wen-Ching Wang, Yu-Ju Chang &amp; Hsueh-Ching Wang, (2019), An Application of the Spatial Autocorrelation Method on the Change of Real Estate Prices in Taitung City. Int Jour Geo-Information, (8)249, doi:10.3390/ijgi8060249 Online Tutorial: [R Programming] Reka Solymosi and Juanjo Medina (2022) Crime Mapping in R, Chapter 9: Spatial Regression Models Click link Week 10: Spatial Models (Part 2) Book: [R Programming] Brunsdon, C. et al (2018) An Introduction to R for Spatial Analysis and Mapping; Chapter 7: Spatial Attribute Analysis with R, (See pages 257 to 262) Click link (Note: Books can be borrowed from UCL’s Library) Book: [R Programming] Brunsdon, C. et al (2018) An Introduction to R for Spatial Analysis and Mapping; Chapter 8: Localised Spatial Analysis, (See pages 281 to 289) Click link (Note: Books can be borrowed from UCL’s Library) Book: [Theory] Lloyd, C.D., et al (2010) Spatial Data Analysis: An Introduction for GIS Users; Chapter 8: Exploring spatial patterning in data values, (See section 8.5.3. [Geographically Weighted Regression] on pages 115 to 123) Book: [R Programming] Roger S. Bivand, Edzer J. Pebesma and Virgilio Gomez-Rubio, (2008), Applied Spatial Data Analysis with R; Chapter 10: Modelling of Areal Data, (See section 10.5.3. [Geographically Weighted Regression] on pages 305 to 309) Paper [Theory] Comber, A. et al (2022) A Route Map for Successful Application of Geographically Weighted Regression; Geographical Analysis; https://doi.org/10.1111/gean.12316 Click link "],["installation-of-r-and-rstudio.html", "1 Installation of R and RStudio 1.1 What is R and RStudio? 1.2 Downloading and install R and RStudio on to your laptop", " 1 Installation of R and RStudio 1.1 What is R and RStudio? R, or RStudio is a statistical software programming package that allows the user to carry out different types of statistical analysis. It can also be used as a GIS software to perform various kinds of spatial analysis as you will see throughout the course of GEOG0114 and GEOG0125 in term 2. In the same vein, you can use it for data managing and geo-processing (i.e., importing different types of spatial formats for manipulation beforehand for spatial analysis). There are two versions: The famous icon on the left is the version for R, and the one on the right is the version for RStudio. Both software packages are the same. The only difference is that RStudio is attractive, intuitive, and more importantly, it is user-friendly than Base R. So, we will be using this version (i.e., RStudio) throughout the course. Let us talk about downloading RStudio. 1.2 Downloading and install R and RStudio on to your laptop RStudio is an open source software, and today its the go-to software for many researchers - its highly recommended for anyone in the domains of data science, scientific research, and technical communication. It is easy to access, and easy to download and install. In order for RStudio to work you must first install R. You can follow the steps to download and install the correct version of R and RStudio for your operating system (i.e., Windows or MAC). 1.2.1 Installation for MacOS users You will need to have the following software installed for R and RStudio to work properly on MAC. R (version 4.2.3) RStudio (version 2023.06.2-561) XQuartz (version 2.8.5) XCode (version 14.3.1 (14E300c)) Installation of R (4.2.3) and RStudio (2023.06.2-561) on MAC: OS User type R (Base) RStudio Desktop MAC R-4.2.3.pkg RStudio-2023.06.2-561.dmg Download the file for R-4.2.3.pkg attached in the table above. Double-click the downloaded file (i.e., R-4.2.3.pkg) and follow the steps to complete the installation. Now, download the file (i.e., .dmg) for RStudio from the link provided in the above table. Double-click the downloaded file (i.e., RStudio-2023.06.2-561.dmg) and then drag and drop the RStudio icon into the Applications folder to complete the installation. Installation of XQuartz (2.8.5): Some functions in R require some of the libraries from XQuartz to function properly on your MAC. You can download the latest version of XQuartz (XQuartz-2.8.5.pkg) by clicking on this LINK. You can simply complete the installation process by following its steps. Installation of XCode (14.3.1 [14E300c]): Some functions in R require some of the external developer tools from XCode application to function properly on your MAC. Go to the App Store application and get the XCode app downloaded by clicking on this LINK. Once it is downloaded, you can click on the “OPEN” button to verify it’s been downloaded. A window will prompt you to complete installation. Lastly, and for safe measures - we going to run this through our Terminal. You can open the Terminal program by going to the Applications &gt; Utilities folder and select the Terminal application In the terminal, type the following code xcode-select --install. If you get the following error message shown in the code chunk below, then it means that the XCode program has been installed properly - no need to do anything at this point. Otherwise, the terminal will proceed to install the XCode tool remotely. xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; in System Settings to install updates This completes the installation process for R and RStudio on MAC. 1.2.2 Installation for Windows users You will need to have the following software installed for the rstan package to work on Windows. R (version 4.2.3) Rtools42 (version 4.2) RStudio (version 2023.06.0-421) Installation of R (4.3.2) and RStudio RStudio (2023.06.2-561) on Windows: OS User type R (Base) RStudio Desktop Windows R-4.2.3-win.exe RStudio-2023.06.2-561.exe Download the file for R-4.2.3-win.exe attached in the table above. Double-click the downloaded file (i.e., R-4.2.3-win.exe) and follow the steps to complete the installation. Now, we can download the file (i.e., .exe) for RStudio from the link provided in the above table. Double-click the downloaded file (i.e., RStudio-2023.06.0-421.exe) and follow the steps from the installer to complete the installation. Installation of Rtools 4.2 For Windows users, after you have completed the installation for R and RStudio, you are required to install the Rtools42 package as it contains some libraries and developer tools for the smooth functioning of R (and for future packages in term 2 e.g., rstan). Download the latest version of Rtools42 by clicking on this LINK to initiate the download of the Rtools42 installer. Double-click the downloaded rtools42-5355-5357.exe file and follow the steps to complete the installation. This completes the installation process for R and RStudio on Windows. This concludes the installation section and sets you computer up for the course. If you encounter any problems please contact me ahead of next week. "],["spatial-analysis-for-data-sciences.html", "2 Spatial analysis for data sciences 2.1 Introduction 2.2 Basics of managing data in RStudio 2.3 Basic visualisation of spatial data in RStudio 2.4 References 2.5 Data Sources 2.6 Practical homework", " 2 Spatial analysis for data sciences 2.1 Introduction 2.1.1 Lecture video (Length: 01:00:01) [Watch on YouTube] 2.1.2 Computer practical video (Length: 01:59:49) [Watch on YouTube] The goal for this week’s session is to get you started with using RStudio, and being familiar with its environment. The session aims to introduce you to the basic programming etiquette, as well as building confidence for using RStudio as a GIS tool. At the end of this session, you should be able to perform some basic data managing tasks as well as generate a simple choropleth map in RStudio. 2.1.3 Learning outcomes The first task includes getting you started with RStudio by installing the needed software(s) (i.e., RStudio and R) on to your personal laptop, and becoming familiar with its environment and panels. We will begin a soft introduction on the basics of managing data in RStudio. This includes learning how to create various objects in RStudio such as vector and data frame objects. The crucial part of this session we be to know how to the set working directories as well as import your dataset in RStudio. Finally, we will learn how to perform the basic visualisation of spatial data in RStudio. Let us begin. 2.1.4 Becoming familiar with the panels in RStudio You should by now have opened RStudio on your laptop. When opening RStudio for the first time, you are greeted with its interface. The window is split into three panels: 1.) R Console, 2.) Environments and 3.) Files, help &amp; Output. Panel 1: The Console lets the user type in R-codes to perform quick commands and basic calculations. Panel 2: The Environments lets the user see which datasets, spatial objects and other files are currently stored in RStudio’s memory Panel 3: Under the File tab, it lets the user access other folders stored in the computer to open datasets. Under the Help tab, it also allows the user to view the help menu for codes and commands. Finally, under the Plots tab, the user can perusal his/her generated plots (e.g., histogram, scatterplot, maps etc.). The above section is the Menu Bar. You can access other functions for saving, editing, and opening a new Script File for writing codes. Opening a new Script File will reveal a fourth panel above the Console. You can open a Script File by: Clicking on the File tab listed inside the Menu Bar. A scroll down bar will reveal itself. Here, you can scroll to the section that says New File. Under New File, click on R Script. This should open a new Script File titled “Untitled 1”. Important Notes: Throughout the course, and in all practical tutorials, you will be encouraged to use an R Script for collating and saving the codes you have written for carrying out spatial analysis. However, we will start writing codes in a script later when we reach to section 1.3 of this tutorial. For now, let us start with the absolute basics, which is interacting with the R Console and using it as a basic calculator for typing simple code. 2.1.5 Using R Console as a Calculator The R console window (i.e., Panel 1) is the place where RStudio is waiting for you to tell it what to do. It will show the code you have commanded RStudio to execute, and it will also show the results from that command. You can type the commands directly into the window for execution as well. Let us start by using the console window as a basic calculator for typing in addition (+), subtraction (-), multiplication (*), division (/), exponents (^) and performing other complex sums. Click inside the R Console window and type 19+8, and press enter key button ↵ to get your answer. Quickly perform the following maths by typing them inside the R Console window: # Perform addition 19+8 # Perform subtraction 20-89 # Perform multiplication 18*20 # Perform division 27/3 # To number to a power e.g., 2 raise to the power of 8 2^8 # Perform complex sums (5*(170-3.405)/91)+1002 Aside from basic arithmetic operations, we can use some basic mathematical functions such as the exponential and logarithms: exp() is the exponential function log() is the logarithmic function Do not worry at all about these functions as you will use them later in the weeks to come for transforming variables. Perform the following by typing them inside the R Console window: # use exp() to apply an exponential to a value exp(5) # use log() to transforrm a value on to a logarithm scale log(3) 2.1.6 Creating basic objects and assigning values to it Now that we are familiar with using the console as a calculator. Let us build from this and learn one of the most important codes in RStudio which is called the Assignment Operator. This arrow symbol &lt;- is called the Assignment Operator. It is typed by pressing the less than symbol key &lt; followed by the hyphen symbol key -. It allows the user to assign values to an Object in R. Objects are defined as stored quantities in RStudio’s environment. These objects can be assigned anything from numeric values to character string values. For instance, say we want to create a numeric object called x and assign it with a value of 3. We do this by typing x &lt;- 3. When you enter the object x in the console and press enter ↵, it will return the numeric value 3. Another example, suppose we want to create a string object called y and assign it with some text \"Hello!\". We do this typing y &lt;- \"Hello!\". When you enter y in console, it will return the text value Hello. Let us create the objects a,b, c, and d and assign them with numeric values. Perform the following by typing them inside the R Console window: # Create an object called &#39;a&#39; and assign the value 17 to it a &lt;- 17 # Type the object &#39;a&#39; in console as a command to return value 17 a # Create an object called &#39;b&#39; and assign the value 10 to it b &lt;- 10 # Type the object &#39;b&#39; in console as a command to return value 10 b # Create an object called &#39;c&#39; and assign the value 9 to it c &lt;- 9 # Type the object &#39;c&#39; in console as a command to return value 9 c # Create an object called &#39;d&#39; and assign the value 8 to it d &lt;- 8 # Type the object &#39;d&#39; in console as a command to return value 8 d Notice how the objects a, b, c and d and its value are stored in RStudio’s environment panel. We can perform the following arithmetic operations with these object values: # type the following and return an answer (a + b + c + d)/5 # type the following and return an answer (5*(a-c)/d)^2 Let us create more objects but this time we will assign character string(s) to them. Please note that when typing a string of characters as data you will need to cover them with quotation marks \"...\". For example, say we want to create a string object called y and assign it with some text \"Hello!\". We do this by typing y &lt;- \"Hello!\". Try these examples of assigning the following character text to an object: # Create an object called &#39;e&#39; and assign the character string &quot;RStudio&quot; e &lt;- &quot;RStudio&quot; # Type the object &#39;e&#39; in the console as a command to return &quot;RStudio&quot; e # Create an object called &#39;f&#39;, assign character string &quot;Hello world&quot; f &lt;- &quot;Hello world&quot; # Type the object &#39;f&#39; in the console as a command to return &quot;Hello world&quot; f # Create an object called &#39;g&#39; and assign &quot;Blade Runner is amazing&quot; g &lt;- &quot;Blade Runner is amazing&quot; # Type the object &#39;g&#39; in the console to return the result g We are now familiar with using the console and assigning values (i.e., numeric and string values) to objects. The parts covered here are the initial steps and building blocks for coding and creating datasets in RStudio. Let us progress to section 1.3. Here is where the serious stuff start. We will learn the basics of managing data and some coding etiquette - this includes creating data frames, importing &amp; exporting spreadsheets, setting up work directories, column manipulations and merging two data frames. Learning these basic tasks are key for managing data in RStudio. Point of no return: From here on out - let us open a script file and type codes there instead of the Console. We are getting serious now, we will never use the Console again. 2.2 Basics of managing data in RStudio 2.2.1 How do we enter data into RStudio? As you have already seen, RStudio is an object-oriented software package and so entering data is slightly different for the usual way of inputting information into a spreadsheet (e.g., Microsoft Excel). Here, you will need to enter the information as a Vector object before combining them into a Data Frame object. Consider this crude example of data containing the additional health information for 4 people. It contains the variable (or column) names ‘id’, ‘name’, ‘height’, ‘weight’ and ‘gender’ id name height weight gender 1 Kofi 1.65 64.2 M 2 Harry 1.77 80.3 M 3 Huijun 1.70 58.7 F 4 Fatima 1.68 75.0 F Now, when entering data to RStudio it is not like Microsoft Excel where we enter data into the cells of a spreadsheet. In RStudio, data is entered as a sequence of elements and listed inside an object called a vector. For instance, if we have three age values of 12, 57 and 26 years, and we want to enter this in RStudio, we need to use the combine function c() and combine these three elements into a vector object. Hence, the code will be c(12, 57, 26). We can assign this data by typing this code as age &lt;- c(12, 57, 26). Any time you type ‘age’ into RStudio console it will hence return these three values unless you chose to overwrite it with different information. Let us look at this more closely with the 'id' variable in the above data. Each person has an ID number from 1 to 4. We are going to list the numbers 1, 2, 3 and 4 as a sequence of elements into a vector using the combine function c() and then assign it to as a vector object calling it 'id'. # Create &#39;id&#39; vector object id &lt;- c(1, 2, 3, 4) # Type the vector object &#39;id&#39; in console to see output id Now, let us enter the information the same way for the remaining columns for ‘name’, ‘height’, ‘weight’ and ‘gender’ like we did for ‘id’: # Create &#39;name&#39; vector object name &lt;- c(&quot;Kofi&quot;, &quot;Harry&quot;, &quot;Huijun&quot;, &quot;Fatima&quot;) # Create &#39;height&#39; (in meters) vector object height &lt;- c(1.65, 1.77, 1.70, 1.68) # Create &#39;weight&#39; (in kg) vector object weight &lt;- c(64.2, 80.3, 58.7, 75.0) # Create &#39;gender&#39; vector object gender &lt;- c(&quot;M&quot;, &quot;M&quot;, &quot;F&quot;, &quot;F&quot;) Now, that we have the vector objects ready. Let us bring them together to create a proper dataset. This new object is called a Data frame. We need to list the vectors inside the data.frame() function. # Create a dataset (data frame) dataset &lt;- data.frame(id, name, height, weight, gender) # Type the data frame object &#39;dataset&#39; in console to see output dataset # You can also see dataset in a data viewer, type View() to data: View(dataset) Important Notes: The column ‘id’ is a numeric variable with integers. The second column ‘name’ is a text variable with strings. The third &amp; fourth columns ‘height’ and ‘weight’ are examples of numeric variables with real numbers with continuous measures. The variable ‘gender’ is a text variable with strings – however, this type of variable is classed as a categorical variable as individuals were categorised as either ‘M’ and ‘F’. 2.2.2 How do we create a variable based on other existing variables in our data frame? To access a variable by its name within a data frame, you will need to first type the name of the data frame followed by a $ (dollar sign), and then typing the variable’s name of interest. For instance, suppose you just want to see the height values in the Console viewer - you just type: # to access height - you need to type &#39;dataset$height&#39; dataset$height We can use other columns or variables within our data frame to create another variable. This technique is essentially important when cleaning and managing data. From this dataset, it is possible to derive the body mass index bmi from height and weight using the formula: \\(BMI = weight/height^2\\) To generate bmi into our data frame, we would need to access the height (m) and weight (kg) columns using the $ from the data frame its stored to, and apply the above formula as a code to generate the new bmi column: # Create &#39;bmi&#39; in the data frame i.e.,&#39;dataset&#39; and calculate &#39;bmi&#39; # using the $weight and $height dataset$bmi &lt;- dataset$weight/((dataset$height)^2) # View the data frame ‘dataset’ and you will see the new bmi variable inside View(dataset) You can overwrite the height (m) column to change its units into centimeters by multiplying it to 100; equally, the weight (kg) column can be overwritten and converted from units of kilograms to grams by multiplying it to 1000. # using $height and *100 dataset$height &lt;- dataset$height*100 # using $weight and *100 dataset$weight &lt;- dataset$weight*1000 # use View() the data frame ‘dataset’ and you will see the updated variables View(dataset) 2.2.3 How do we set the working directory in our computer by connecting our folder to RStudio with the setwd() function? Now, we are getting very serious here! Important action: Before we do anything - make sure to have downloaded the data set for week 1 if you haven’t done so by clicking here. In your computer, create a new folder on your desktop page and rename the folder to “GEOG0114”, and create another folder within “GEOG0114” and rename it as “Week 1”. Make sure to unzip and transfer ALL the downloaded data directly to the Week 1 folder. Now, this part of the practicals are probably the most important section of this tutorial. It’s usually the “make” or “break” phase (i.e., you ending up loving RStudio OR you hating it and not ever wanting to pick up R again). We are going to learn how to set-up a working directory. This basically refers to us connecting the RStudio to the folder containing our dataset. It allows the user to tell RStudio to open data from a folder once it knows the path location. The path location specifies the whereabouts of the data file(s) stored within a computer. Setting your directory in RStudio beforehand makes life incredibly easier in terms of finding, importing, exporting and saving data in and out of RStudio. To illustrate what a path location is – suppose on my desktop (mac/widows) there is a folder called “GEOG0114”, and within that folder, exists another folder called “Week 1”. Finally, suppose a comma separated value (.csv) data file called “London_LSOA_FireHazards.csv” is store in this last folder i.e., Week 1. If via RStudio you want to open this CSV data file located in within the “Week 1” folder. You will need to first set the path to “Week 1” in RStudio using the setwd() function. Therefore, the path location to this folder on a Windows machine would be written as follows, \"C:/Users/accountName/Desktop/GEOG0114/Week 1\". You can access this piece of information simply by: Open the GEOG0114 folder to reveal the Week 1 folder. Open the Week 1 folder in the data files are stored. Now, click on the bar at the top which shows GEOG0114 &gt; Week 1. This should highlight and show \"C:\\Users\\accountName\\Desktop\\GEOG0114\\Week 1\" (see image below): Now, copy \"C:\\Users\\accountName\\Desktop\\GEOG0114\\Week 1\" and paste the path name into the setwd() function in your R script. Lastly, change all the back slashes \\ in the path name to forward slashes / and run the code. It should look like this: setwd(\"C:/Users/accountName/Desktop/GEOG0114/Week 1\"). For Windows, the setwd() is as follows: # set work directory in windows setwd(&quot;C:/Users/accountName/Desktop/GEOG0114/Week 1&quot;) For MAC users, its marginally different. The path location would be written as follows, \"/Users/accountName/Desktop/GEOG0114/Week 1\". You can access this piece of information simply by: Right-clicking on the folder “Week 1” (not file) in which the files are stored. Hold the “Option” ⌥ key down Click Copy \"filename\" as Pathname Paste the copied path name into the function setwd() and run the code For Mac, the setwd() is as follows: # set work directory in macs setwd(&quot;/Users/accountName/Desktop/GEOG0114/Week 1&quot;) This should set the working directory. Now, let us learn how to import a CSV data into RStudio. 2.2.4 How do we import, merge and export CSV data with RStudio? 2.2.4.1 Importing data using read.csv() As you will be working mostly with comma separated value formatted data (i.e., csv) we will therefore learn how to import and export in RStudio. There are two files that we are going to import into RStudio from Week 1’s folder: London_LSOA_Deprivation_2019.csv which contains information on seven indicators (as scores) and an IMD ranking for socioeconomic deprivation for 4,836 postcodes across London in 2019. London_LSOA_FireHazards_2019.csv which contains details about the observed and estimated expected number of fire-related accidents to have occurred in residential premises with the overall number of houses in 4,836 postcodes across London in 2019. To import a csv into RStudio, we use the read.csv() function. To demonstrate this, let us import the data for fires into an data frame object and name it as Fire_data # Import data using read.csv() function Fire_data &lt;- read.csv(file=&quot;London_LSOA_FireHazards_2019.csv&quot;, header = TRUE, sep = &quot;,&quot;) Just in case…suppose if we did NOT set the working directory earlier. We would have to go through the hassle of typing the path location in the read.csv(). For windows: Fire_data &lt;- read.csv(file=&quot;C:/Users/accountName/Desktop/GEOG0114/Week 1/London_LSOA_FireHazards_2019.csv&quot;, header = TRUE, sep = &quot;,&quot;) For Mac: Fire_data &lt;- read.csv(file=&quot;/Users/accountName/Desktop/GEOG0114/Week 1/London_LSOA_FireHazards_2019.csv&quot;, header = TRUE, sep = &quot;,&quot;) I do not recommend doing it this way. Just set the work directory with setwd() to make life easier for yourself. Important Notes: The arguments used in read.csv() function – 1.) ‘file =’ is a mandatory option where you quote the name of the file to be imported; 2.) ‘header = TRUE’ option is set to TRUE which is telling RStudio that the file that is about to be imported has column names on the first row so it should not treat as observations; and 3.) ‘sep = \",\"’ we are telling RStudio that the format of the dataset is comma separated. We have imported the fire hazards data. Now, let us import the second data for deprivation using the read.csv() function and call it Deprivation_data. The code would look something as follows: # Import data using read.csv() function Deprivation_data &lt;- read.csv(file=&quot;London_LSOA_Deprivation_2019.csv&quot;, header = TRUE, sep = &quot;,&quot;) # Show viewer the data sets View(Deprivation_data) View(Fire_data) 2.2.4.2 Joining two datasets by merger using the merge() function You will often find yourself merging two or more data frames together, especially bringing together a spatial object with a non-spatial object. We cannot stress the importance of merging objects in the correct order so that the spatial attributes are preserved. In this instance, we are just dealing with two ordinary dataset which are non-spatial - i.e., one data set contains information on Fires that occurred in geographic units in London know as Lower Super Output Areas (LSOA), while the other contains its corresponding information for socioeconomic indicators that describe the LSOA. Hence, it is possible to merge the two data frames uniquely using a common key variable like LSOA_code. This task can be done using the merge function merge(). Consequently, we want the format of the merge code to look something akin to this syntax merge(target_object, selected_object, by=”LSOA”). Merging data frames is indeed a very important technique to know especially if you need to bring together event information with no spatial dimension with actual spatial data. Alright, let’s merge the deprivation data on the fire records using the LSOA_code column, and generate a bigger data frame that contains both the fire and socioeconomic information: # Using the merge() function Full_data &lt;- merge(Fire_data, Deprivation_data, by.x = “LSOA_code”, by.y = “LSOA_code”, all.x = TRUE) # View the datasets View(Full_data) Important Notes: The arguments used in merge.csv(): Fire_data is the target data frame we want something to be merged on to. Deprivation_data is the selected data frame we are using to merge with the Fire_data. by.x = “LSOA_code” option we are specifying the name of the join column from the target data frame i.e., Fire_data. by.y = “LSOA_code” option we are specifying the name of the join column from the selected data frame i.e., Deprivation_data all.x=TRUE option we are telling RStudio to retain all rows that are originally from the target data after merging regardless of whether or not they are present in the selected data frame. So even if a row from the selected data does not find a unique link with any of the rows in target data to match too - it will still preserve the target data frame by not discarding unlinked rows. But it will discard the unmatched rows from the selected data frame. 2.2.4.3 Saving your dataset using the write.csv() function Let us save a version of this as a .csv file as a saved product named “London_Fire_and_Deprivation_2019.csv”. This can be done by using the write.csv() function. It will export the data frame object into a .csv format. # Export ‘Full_data’ object as .csv into &#39;Week 1&#39; folder write.csv(Full_data, file = &quot;London_Fire_and_Deprivation_2019.csv&quot;, row.names = FALSE) Important Notes: The arguments used in merge.csv(): Full_data is an object we are exporting. It is compulsory to specify the object data frame we want to export file = is a mandatory argument. We must give a name to the file we wish to export it as with .csv extension. row.names = this is an annoying argument! It will automatically index the dataset with unique row numbers by default if we do not specify FALSE! Since the data has its own unique identifiers (i.e., LSOA_code) we specify ‘FALSE’ to not perform this action of indexing Again, suppose if you did NOT set the work directory to your folder, you will have to type the whole path location to where you want the data to be exported which could be a hassle: For Windows: write.csv(Full_data, file = &quot;C:/Users/accountName/Desktop/GEOG0114/Week 1/London_Fire_and_Deprivation_2019.csv&quot;, row.names = FALSE) For Mac: write.csv(Full_data, file = &quot;/Users/accountName/Desktop/GEOG0114/Week 1/London_Fire_and_Deprivation_2019.csv&quot;, row.names = FALSE) Again, I do not recommend doing it this way. Just set the work directory with setwd() to make life easier for yourself and to avoid R calling you out for errors. Now that we have learned a lot of the basic things in RStudio – the stuff shown in section 1.3 will be used quite a lot in future tutorials. Let us progress to the section 1.4 where will start using RStudio as a GIS software. Here, we will create our first map to display the spatial distribution of socioeconomic deprivation using the Full_data data frame object. 2.3 Basic visualisation of spatial data in RStudio 2.3.1 Installing packages into RStudio So far, we have been using functions and commands that are by default built-in RStudio. As you will become more and more proficient in RStudio, you will come to realise that there are several functions in RStudio that are in fact not built-in by default which will require external installation. For instance, the “sf” package which is called “Simply Features” allows the user to load shapefiles (a type of Vector spatial data) into RStudio’s memory. Another important package is called “tmap”, this package gives access to various functions that allows the user to write code and emulate RStudio as a GIS software. These are examples of packages with enables mapping of spatial data. They need to be installed as they not built-in programs in RStudio. For basic mapping, We will need to install following packages: devtools, stars, tmap and sf using the install.packages() and install_version() functions, and then activate the packages to make them active using the library() function. First install devtools and stars: install.packages(&quot;devtools&quot;) devtools::install_version(&quot;stars&quot;, version = &quot;0.5.3&quot;, repos = &quot;http://cran.us.r-project.org&quot;) You will be prompted to choose an update for the stars package. Type 1 for “All” and press the enter button ↵ to continue the installation for stars. Once the binaries for devtools and stars are done, install the tmap and sf packages. install.packages(&quot;sf&quot;) install.packages(&quot;tmap&quot;) Once the installation is complete, you MUST activate the packages using the library() function. Type the following to perform this action: # Active the “sf” and “tmap” packages library(&quot;sf&quot;) library(&quot;tmap&quot;) 2.3.2 Adding shapefiles in RStudio The sf package grants the user access to a function called read_sf() to read-in shapefiles into RStudio. A shapefile typically contains the geometry of the spatial features e.g., points, line segment and boundaries of an areal feature etc. The shapefile has the extension of .shp (and are always accompanied by its other supporting files with extensions .shx, .prj, .dbf and .cpg). We have two types of shapefiles: London_LSOA_Areas.shp which contains the spatial boundaries of all LSOA postcodes in London. London_Borough_Shapefile.shp which contains the spatial boundaries for all 33 Boroughs in London. We can easily load them in RStudio as Spatial Polygon objects, type into your script: # Add shapefiles for LSOA and Boroughs london_lsoa_shapefile &lt;- read_sf(&quot;London_LSOA_areas.shp&quot;) london_borough_shapefile &lt;- read_sf(&quot;London_Boroughs_Shapefile.shp&quot;) We interested in visualising the data at an LSOA-level. We would need to merge the non-spatial (aka ordinary) data i.e., Full_data, uniquely in to the Spatial Polygon object we loaded in previously i.e., london_lsoa_shapefile, using the LSOA_code column. Again, we can use the merge() function to perform this task the same way we carried out the joining of the two ordinary data frames in section 1.3.4.2. Consequently, we want the format of the merge code to look something akin to this syntax merge(target_spatial_object, selected_non_spatial_object, by=”LSOA”). # Using the merge() function Spatial_data &lt;- merge(london_lsoa_shapefile, Full_data, by.x = “LSOA_code”, by.y = “LSOA_code”, all.x = TRUE) # View the datasets View(Spatial_data) 2.3.3 Mapping with ‘tmap’ functions in RStudio The tmap is the best package for creating maps in RStudio – it’s easy to code and user friendly. Let’s finally start some mapping! Here are some basic ‘tmap’ functions to be very familiar with: tmap functions What it does… tm_shape() This allows the user to add layers to the map tm_polygon() This allows the user to direct customisations the added layer specified in tm_shape(). Note: This follows immediately after tm_shape() tm_fill() Here, we specify the variable of interest we want to map in the boundaries specified in tm_shape() tm_layout() This allows the user to make heavy customisations to the main title, legends and other cosmetics to text sizes etc. tm_compass() This allows the user to add a compass visual to the map output tm_scale_bar() This allows the user to add a scale bar to the map output 2.3.3.1 Visualising the outline(s) of study area Suppose you want to visual just the outline of London’s LSOA only: # Visual outline of London’s LSOA postcodes only tm_shape(Spatial_data) + tm_polygons() # Insert the “Spatial_data” object into the command line of # tm_shape(). No customisation has been applied here. You can customise the level of transparency for both the area and borders by adding some arguments in the tm_polygon() [i.e., alpha, and border.alpha which only take values between 0 (full transparency) to 1 (100% solid)]. For example: # Controlling transparencies for borders and areas tm_shape(Spatial_data) + tm_polygons(alpha = 0.1, border.alpha = 0.4) # Insert the “Spatial_data” object into the command line of # tm_shape(), and in tm_polygon(), make the background (alpha) 10% solid # and 40% for the borders (border.alpha) 2.3.3.2 Adding another layer on top of study area Suppose you want to add another layer to show the regions (i.e., Borough) of London for which the LSOA areas reside in, you can use another tm_shape() in the code, the coding would be as follows: # Adding another layer tm_shape(Spatial_data) + tm_polygons(alpha = 0.1, border.alpha = 0.4) + tm_shape(London_borough_shapefile) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) # The background of the added layer has been rendered to full # transparency with alpha set to 0 and borders are fully solid with # border.alpha set to 1 and border.col (colour) set to “black” to appear # pronounced. 2.3.3.3 Full visualising of data in the maps Suppose you want to visual the spatial data in those postcodes, we can use the tm_fill() function. Let us visual the IMD_Decile column which has DISCRETE (or CATEGORICAL) values classed from 1 to 10 to signify areas that are deprived (with 1 being the poorest) and those that are wealthier (with 10 being the least deprived). The coding would be as follows: # Generate map IMD_Deciles tm_shape(Spatial_data) + tm_fill(&quot;IMD_Decile&quot;, style = &quot;cat&quot;, title = &quot;Deprivation (Deciles)&quot;, palette = &quot;RdYlGn&quot;) + tm_shape(london_borough_shapefile) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_compass(type = &quot;arrow&quot;, position = c(&quot;right&quot;, &quot;top&quot;)) + tm_layout(legend.outside = TRUE, legend.title.size = 0.8, legend.text.size = 0.7, legend.title.fontface = 2) In the tm_fill(), we insert the variable of interest we want to visual. The style argument tells RStudio how to break the values into intervals for the legend and colour scheme (there are many e.g., “fixed”, “cont”, “pretty” and “cat” etc.,). We used the “cat” in the style argument because the IMD_Decile variable is categorical. The title argument applies it to the legend only (not the plot itself!). The palette argument controls the colour scheme of the legend. In this example, we used a spectral type of colour i.e., “RdYlGn” that starts from Red (to show intense poverty) to Yellow (to signify normal) and to Green (to show intense levels of being rich). Geography 101 – when creating a map, it is always best to add the North compass and scale bar. This is done with the tm_compass() and tm_scale_bar() functions. The tm_layout() allows you to make further customisations to the map such as placing the legends outside the plot region and modifying the text size etc. You can experiment with them by checking the help menu – just type: ?tm_layout() in the console. This concludes this computer lab session. Challenge yourself with the task placed in section 1.6 2.4 References 2.4.1 Recommended reading (see reading list) Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; Systems (4th Edition); Chapters 2: The Nature of Geographic Data Click link (Note: use of your UCL login via institutional organisation (UK Federation) is required to access the digital book) Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; Systems (4th Edition); Chapters 3: Representing Geography Click link (Note: use of your UCL login via institutional organisation (UK Federation) is required to access the digital book) Book: [R Programming] Brunsdon, C. et al (2018) An Introduction to R for Spatial Analysis and Mapping; Chapter 3: Basics of Handling Spatial Data in R Click link (Note: Books can be borrowed from UCL’s Library) Book: [R Programming] Dorman, M. (2014) Learning R for Geospatial Analysis; Chapter 1: The R Environment Click link (Note: Digital book) Book: [R Programming] Dorman, M. (2014) Learning R for Geospatial Analysis; Chapter 3: Working with tables Click link (Note: Digital book) Paper: [R Programming] Tennekes, M. (2018). tmap: Thematic Maps in R. Journal of Statistical Software, 84(6), 1–39. https://doi.org/10.18637/jss.v084.i06 (Download) 2.5 Data Sources UK Fire statistics incident level dataset (see: “Low-level geography dataset”)[Source: UK Gov] Click Here English indices for Multiple Deprivation (IMD) for 2019 [Source: UK Gov] Click Here UK Shape files for different geographic units [Source: Office for National Statistics, Open Geography Portal] Click Here 2.6 Practical homework Exploring the burden of fire hazards and vulnerability in London An incidence rate (IR) is typically a measure of frequency used to quantify the occurrence of an event. This basic quantitative measure is often applied in social sciences (e.g., criminology for crime rates, in education on pass rates for grades), epidemiology and disaster sciences as well. The study of fire hazards and safety is an intersection of these three fields. Objectives: Use the spatial data you have built throughout the exercise to visualise the distribution of incidence of fires that occurred in residential premises across postcodes in London in 2019. HINTS: The incidence rate (I) formula for calculating fires hazards across LSOAs in London is the reported number of residential premises in an LSOA that experienced a fire event (E) divided by the total number of residential premises in an LOSA (T). This is shown below expressed per 1,000 residence (per capita). The reported number of residential premises is the column Fires2019. The total number of houses in an LSOA is the column TotalHouses2019 The incidence rate formula is: \\(I = (E/T) × 1000\\) Experiment with the tmap functions and arguments to create a map showing the incidence rate of fire hazards across LSOAs in London. In the arguments for the tm_fill() function - include the following: 1.) use \"Reds\" as colour palette scheme in the palette = argument; 2.) continuous legend scheme for the style= argument; and 3.) an appropriate title such as \"Fires per 1000\" for the legends in the title = argument. Include the following customizations: 1.) a scale bar and a north arrow in the visualisation using the tm_scale_bar() and tm_compass(); and 2.) an overlay the London Borough shapefile on top of the London LSOA shapefile, and render it transparent. Try using the tm_text() function to include the names of the Boroughs in the visualisation - this column is called ctyua16nm in the Borough’s shapefile. Question: How would you provide a descriptive interpretation of the spatial distribution/incidence of residential fires across LSOAs in London? IMPORTANT NOTE: The solutions for this homework will be released next week "],["graphical-representation-of-spatial-data.html", "3 Graphical representation of spatial data 3.1 Introduction 3.2 Case study 3.3 Loading our data sets for case study 3.4 Data Processing 3.5 Greenspace in London 3.6 Attributions 3.7 References (see reading list) 3.8 Data Sources 3.9 Practical homework", " 3 Graphical representation of spatial data 3.1 Introduction 3.1.1 Lecture video (Length: 43:13) [Watch on YouTube] 3.1.2 Computer practical video (Length: 01:59:48) [Watch on YouTube] The goal for this week’s session is to introduce you to the various and most common geoprocessing (i.e., spatial operations) and data managing techniques for handling geospatial vector datasets. Geoprocessing is a framework and set of tools for processing geographic and related data - having this under your sleeve will help you to efficiently analyse and represent geospatial data. 3.1.3 Learning outcomes Understanding spatial properties, relationships and how they are used within spatial operations are the building blocks to spatial data processing and analysis. This tutorial takes you through a simple approach to measuring greenspace access for schools in London, using geometric operations as the main methods for processing and analysing your data. You will construct a buffer data set around our greenspace and determine whether nearby schools intersect with this buffer. We will first visualise our data as points to see if we can identify areas of high versus low access - and then aggregate the data to the ward level for potential further use within analysis with statistical data, such as census information. 3.1.4 Getting started To enable the efficient, repeatable and reproducible functionality of our work, we will use R-Studio’s ability to create and host code as a script. Before we do anything therefore, we will need to create a new R script: File &gt; New File &gt; R Script Let’s go ahead and save our script now, so we know it’s stored in our system - and in the future, we only need to remind ourselves to complete a quick save (e.g. cmd + s (mac) / ctrl + s (windows)). 3.1.5 Datasets &amp; setting up the work directory Before you begin, if you have not done so already, please make sure to download all data by clicking here. Create a sub folder called “Week 2” within your “GEOG0114” folder stored in the desktop of your personal computer. Make sure to extract all data from the downloaded zip folder and store it into “Week 2” folder. Use your newly open R script and set the work directory to Week 2’s folder. For Windows, the code for setting the work directory will be: setwd(&quot;C:/Users/AccountName/Desktop/GEOG0114/Week 2&quot;) For MAC, the code for setting the work directory will be: setwd(&quot;/Users/AccountName/Desktop/GEOG0114/Week 2&quot;) 3.1.6 Loading and installing packages We will need to load the following packages: sf: Simple Features tmap: Thematic Mapping The above packages sf and tmap should have been installed previously in the last session. Therefore, we do not have to install them again, we only need to activate them using the library() function. There will be some new packages we need to install: tidyverse: this library is a efficient coding style in RStudio. It allows the use of a pipe function (%&gt;%), among other things, within our work and enables more efficient programming. units: this library provide functions that support the conversion of measurement units in R vectors, matrices and arrays, and among other thing, the simplification of units. # install the packages using the install.package() install.packages(&quot;tidyverse&quot;) install.packages(&quot;units&quot;) # Load the packages with library() library(&quot;tidyverse&quot;) library(&quot;units&quot;) library(&quot;sf&quot;) library(&quot;tmap&quot;) 3.2 Case study Recent research (Bijnens et al. 2020) has shown that children brought up in proximity to greenspace have a higher IQ and fewer behavioral problems, irrespective of socio-economic background. In our analysis today, we will look to understand whether there are geographical patterns to schools that have high versus low access of greenspace and where a lack of greenspace needs to be addressed in London. In this practical we will try to quantify these visual patterns we may observe and find out which schools are within 400 metres of greenspace that is larger than 50,000 square meters. We then calculate for each ward the percentage of schools that have access to a large greenspace. 3.3 Loading our data sets for case study For this analysis we have three different data sets available: schools in London, greenspace in London (split into two separate data sets), and wards (an administrative geography) in London. All three of our data sets are provided as shapefiles which will make working with the data relatively straight-forward (e.g. even for our point data, the schools, we do not need to convert them from a csv as we often find with this type of data). But we’ll need to do quite a few steps of processing to get our final data set. Let’s go ahead and load our three variables - we will use the sf library st_read() command to load our data sets into variables for use within our code: # load london schools shapefile london_schools &lt;- st_read(&#39;school_data_london_2016.shp&#39;) # load london wards shapefile london_wards &lt;- st_read(&#39;london_wards.shp&#39;) # load the two london greenspace shapefiles TL_greenspace &lt;- st_read(&#39;TL_GreenspaceSite.shp&#39;) TQ_greenspace &lt;- st_read(&#39;TQ_GreenspaceSite.shp&#39;) To see what each variable looks like, you can type in plot(name_of_variable) into the R console. This is a quick command to understand both the spatial coverage and attributes of your data - as it will display the data by each of its attribute fields as a plot. 3.4 Data Processing Now we have our data loaded as variables, we’re ready to start processing! In spatial data processing, the question always is: where do I start first? And the easiest answer to that is: make sure all of your data is in the same Projected (or Coordinate) Reference System as each other. Checking - and changing projections - should always be the first step of any workflow as this will ensure you do not carry through any potential mistakes or errors that using the wrong system can cause. 3.4.1 Reprojecting When you loaded your data sets in the above step, you may have notice that in the console additional information about the data set is printed - this includes the metadata on the data set’s Coordinate Reference System! As a result, it is quite easy to simply scroll the terminal to check the CRS for each data set - which as you’ll see, all the data sets bar the school are using EPSG 27700, which is the code for British National Grid, whereas our schools data set shows 3857, the code for Web Mercator. That means we need to start with our london_schools variable - as we know that this is the only data set currently in the wrong projection instead of using British National Grid. To reproject our data set, we can use a function within the sf library, known as st_transform(). It is very simple to use - you only need to provide the function with the data set and the code for the new CRS you wish to use with the data. For now, we will simply store the result of this transformation as a new variable - but you could in the future, rewrite this code to use pipes to pipe this transformation when loading the data set. # reproject london schools from Web Mercator to BNG london_schools_prj &lt;- st_transform(london_schools, 27700) We can now double-check our new variable is in the correct CRS by typing the following into the console and checking the result: # check CRS st_crs(london_schools_prj) As you can see from the output above, our data set has been reprojected into EPSG 27700 or British National Grid! The next step to process our london_schools_prj data set is to reduce the schools to only our chosen London extent. As you may have seen from the map above, our schools cover an area larger than our usual London extent. We can even make a quick map of this to check this properly: # inspect tm_shape(london_wards) + tm_polygons() + tm_shape(london_schools_prj) + tm_dots() As we can see, we indeed have schools outside of our London wards - as a result, we want to remove those schools outside of this boundary. We will do this by first dissolving our ward file to create a more simplified shapefile for use as a “cookie-cutter”. 3.4.2 Dissolving To dissolve a polygon shapefile using R code, we will use the summarise() function that comes from the dplyr library (part of the tidyverse) and summarise our London wards data set by summing its total area (supplied in the HECTARES attribute field/column) across all records. This will reduce our data frame to a single row, which will only contain one attribute - our total area of London, which we can then map/use as our clip (cookie-cutter) feature! # dissolve london_outline &lt;- london_wards %&gt;% summarise(area = sum(HECTARES)) # inspect tm_shape(london_outline) + tm_polygons() 3.4.3 Subsetting Now we have our London outline, we can go ahead and clip our schools data set by our London outline. Whilst there is a clip function within the sf library, what we will do here is use a techinque known as spatial subsetting, which is more similar to selecting by location: we will subset our london schools data set by filtering out those that are not within the London Outline. This approach in R is much quicker than using the clip function - although deciding which approach to use is not only a question of speed but also how each function will affect the filtered data. When using a clip function, the function acts exactly like a cookie-cutter and will trim off any data that overlaps with the boundaries used. Conversely, when using a subsetting approach, if a data point or polygon overlaps on the boundary, it will still be included (depending on the topological relationship used) but in its entirety (i.e. no trimming!). As we’re using point data, it is generally easier to use a subset approach. There are multiple ways and notations to conduct spatial subsetting within R: First, we can either use the [] notation just like you would use for selecting and slicing a normal (table-based) dataframe from R’s base package. Second, sf has its own named functions for geometric operations, including: intersection, difference, symmetrical difference and snap. What actually happens is that when you use the [] notation on the background one of those sf named functions get called. More details on manipulating simple features can be found in this vignette. To keep things simple, we will use the base subsetting approach - which also works similarly when programming in Python, for instance. # subset London schools london_schools_prj_ss &lt;- london_schools_prj[london_outline,] Note In a case like above, you can just overwrite the current london_schools_prj variable as you know it is the data set you want to use. Much of this code could be condensed into several lines using pipes to make our code shorter and more efficient - but then it would be harder to explain! As you progress with R and programming, you are welcome to bring pipes and restructuring into own your code - but even if you don’t, as long as your code does what you need it to do, then that’s our main aim with this course! Once you have run the above code, you should notice that your london_schools_prj_ss variable now only contains 3,372 records, instead of the original 3,889. We can also plot our variable using the same code as above, to double-check that it worked: # inspect tm_shape(london_wards) + tm_polygons() + tm_shape(london_schools_prj_ss) + tm_dots() We should now see that our schools are all contained within our ward data set, so we know this data set is ready to be used for analysis. We will now explore which schools are within 400m of greenspace and which are not. But first, we need to get our greenspace data ready so we can create the 400m buffers needed for this analysis. 3.4.4 Unioning We’ve done a lot of processing so far to do with our schools and ward data, but now it’s time for the greenspace data sets. If you look back at your code, you should remember that we have two data sets for our greenspace in London, which we now need to join together. This type of join is typically known as a union - and this is the type of tool you would want to look for across any GUI system. When it comes to programming, however, in either R or python, there is a much simpler way of joining data sets - and that’s simply copying over the records or observations from one variable into another - and the base library has a ready-to-go function for us to use, known as rbind(). This function allows you to ‘bind’ rows from one or more data sets together. This also works for sf objects. # join greenspace data sets together greenspace = rbind(TQ_greenspace, TL_greenspace) 3.4.5 Clipping The next step is to clip our reduced greenspace data to our London outline. Within sf, the clip function is known as the st_intersection() function - not to be confused with st_intersects() from above! A clip will change the geometry of some of our greenspaces on the outskirts of London, i.e. cookie-cut them precisely to the London outline. If we used the subset approach approach as we did earlier with our point data, we would simply extract all greenspaces that intersect with the London outline - but not change their geometry. What we can do however if reduce the processing required by our computer by using a mixture of these two methods - if we first subset our all_greenspace data set by our London outline and then run the clip, our processing will be much faster: # subset and clip london_greenspace &lt;- greenspace[london_outline,] %&gt;% st_intersection(london_outline) # inspect tm_shape(london_outline) + tm_polygons() + tm_shape(london_greenspace) + tm_polygons() 3.4.6 Attribute selection Now we have only London greenspaces in our data set, the next step, is to reduce the number of greenspaces to only those bigger than 50,000 square meters. To do this, we will use another type of subsetting you’ve probably come across, which is attribute subsetting - by using a simple query to subset only records that have an area larger than 50,000 square metres. To do this, we’ll use the filter() function from the dplyr library we mentioned earlier as well as another function called set_units() which is from the unit library that you’ve loaded - but we haven’t yet discussed. The set_units() function allows us to assign units to numerical values we are using within our query, i.e. here, for our query to run, our value must be in square metres to match the unit of the area_m column. To be able to query on our area, we must first calculate the area of each of our greenspaces. To do so in R, we can use the st_area() function within sf, which will calculate the area of each of our records/observations in our greenspace data set. To store the output of this function as a new column in our london_greenspace data set, we use a simple notation at the end of our london_greenspace variable: $area_m. The $ in R means for this data frame, access the column that proceeds this sign. In our case, we do not as yet have a column called area_m, therefore R will automatically create this column and then store the outputs of the function in this column: # calculate area london_greenspace$area_m &lt;- st_area(london_greenspace) Once we have our area column, we can now filter our data set based on that column and filter out all greenspace with an area that is smaller than 50,000 square meters. # filter large greenspaces large_london_greenspace &lt;- london_greenspace %&gt;% filter(area_m &gt; set_units(50000.0, m^2)) We now can look at our final greenspace data set against our london outline to see its final coverage: # inspect tm_shape(london_outline) + tm_polygons() + tm_shape(large_london_greenspace) + tm_polygons() 3.4.7 Buffering We now have our London greenspace data set - we are ready for the last step of processing with this data set - generating our buffers that we can use to find all schools within 400 meters of the large greenspace areas. Once again, the sf library has a function for generating buffers - we just need to know how to deploy it successfully on our London greenspace data set - and this involves understanding how to denote our distance correctly - as well as understanding if and how we can dissolve our buffer into a single record. To do this, we would investigate the documentation of the function st_buffer() to find out what additional parameters it takes - and how. What we can find out is that we need to (of course!) provide a distance for our buffer - but whatever figure we supply, this will be interpreted within the units of the CRS we are using. In our case, we are using British National Grid and, luckily for us, the units of the CRS is metres - which makes are life significantly easier when calculating these buffers. For other CRS, many use a base unit of an Arc Degree, e.g. WGS84. In this case, you technically have two options: 1) reproject your data into a CRS that uses metres as its base unit OR 2) convert your distance into an Arc Degree measurement. Always choose Option 1. Fortunately none of this is our concern - we know we can simply input the figure of 400 into our buffer and this will generate a buffer of 400m. # greenspace buffer gs_buffer_400m &lt;- st_buffer(large_london_greenspace, dist=400) As our final bit of processing with our greenspace buffer, we want to dissolve the whole buffer into a single record. To do this, we’ll replicate the code used for our London ward dissolve, creating a an area value for our buffer records in the process to be used within the summarisation - and then result in a new gs_buffer_400m_single variable: # dissolve greenspace buffer gs_buffer_400m_single &lt;- gs_buffer_400m %&gt;% summarise(area = sum(st_area(gs_buffer_400m))) # inspect tm_shape(london_outline) + tm_polygons() + tm_shape(gs_buffer_400m_single) + tm_polygons() 3.5 Greenspace in London Great, we are now ready to bring our two data sets together ready for analysis - and to do so, we’ll use subsetting as well as the st_intersects() function, although with this one, we’ll use it in two different ways! Our first task is to identify those schools that have access to greenspace - and extract them to create a new variable for use within our final point-in-polygon count (i.e. how many schools within each ward has access to greenspace). As we know, we can subset our london_schools data set by our greenspace buffer quite easily using the subset approach: # schools within 400m of greenspace london_schools_gs &lt;- london_schools_prj_ss[gs_buffer_400m_single,] Our london_schools_gs variable has been subsetted correctly if we end up with 1,770 records, instead of the 3,372 records we had previously. We can now use this data set and our previous london_schools_prj_ss data set to create counts at the ward level. But before we do that, we will create a binary attribute of greenspace access within our london_schools_prj_ss variable to visualise our school ‘points’. To do this, we’ll use the st_intersects() function mentioned above and add a new column, gs_access (i.e. greenspace access), which will tell us which schools have access to greenspace or not. The st_intersects() function is really useful as its output is a simple TRUE or FALSE statement - does this record intersect with the greenspace buffer? This result is what will be stored in our new column as a TRUE or FALSE response and what we can use to map our schools and their greenspace access: # greenspace access london_schools_prj_ss$gs_access &lt;- st_intersects(london_schools_prj_ss, gs_buffer_400m_single, sparse=FALSE) We could go ahead and recode this to create a 1 or 0, or YES or NO after processing, but for now we’ll leave it as TRUE or FALSE. We can go head and now visualise our schools based on this column, to see if they have access (TRUE) or do not have access (FALSE) to greenspace. To do this, we’ll use the tmap library again: # inspect tm_shape(london_schools_prj_ss) + tm_dots(col=&#39;gs_access&#39;, palette=&#39;BuGn&#39;) You’ll be pleased to read that we are finally here - we are at the last stage of our processing and can finally create the ward-level percentage of schools that have greenspace access, versus those that do not! To do this, we’ll be counting the number of points in each of our polygons, i.e. the number of schools in each ward. To do so in R and with sf, it is one line of code - which at first look does not sound at all like it is completing a point-in-polygon calculation - but it does! To create a PIP count within sf, we use the st_intersects() function again - but instead of using the output of TRUE or FALSE, what we actually extract from our function is its lengths recording. The lengths part of this function records how many times a join feature (i.e. our schools) intersects with our main features (i.e. our wards). (Note here, we do not set the sparse function to FALSE but leave it as TRUE/its default by not entering the parameter). As a result, the length of this list is equal to the count of how many schools are within the polygon - i.e. a PIP calculation. This is a really simple way of doing a PIP calculation - and makes it easy for us to store the output of the function and its lengths (and thus the count) directly as a column within our london_wards data set, as so: # total number of schools in each ward london_wards$total_schools &lt;- lengths(st_intersects(london_wards, london_schools_prj_ss)) # total number of schools with greenspace access in each ward london_wards$gs_schools &lt;- lengths(st_intersects(london_wards, london_schools_gs)) As you can see from the code above, we’ve now calculated this for our total schools data set and the schools that have access to greenspace. The final step in our processing therefore is to create our rate. To do so, we’ll use the same approach of generating a new column within our london_wards data set - and then use a mathematical formula to calculate our rates: # percentage of schools with greenspace access london_wards$gs_rate &lt;- (london_wards$gs_schools/london_wards$total_schools)*100 And that’s it! We now have our greenspace rate for our wards, which we can now again map: # inspect tm_shape(london_wards) + tm_polygons(col=&#39;gs_rate&#39;, palette=&#39;Greens&#39;) We now have our final data set ready for analysis. Right now, we haven’t introduced you to any statistical or spatial analysis techniques to fully analyse our data set - but instead, we can focus on what are data shows visually! The last step of any programming is to extract our variables into permanent data sets for use at a later time. You can at any point in this practical, extract a permanent data file for each of our variables. For now, we’ll extract our new london_wards data set as we might want to use this in some additional analysis that we could look at next week or for our assessments at a later stage. The great thing about coding this up now, is that it will be easy to re-run all of this analysis and export any of the variables, again, at a later time! # write st_write(obj=london_wards, dsn=&#39;london_ward_gs.shp&#39;, delete_dsn=TRUE) You should now see the data set appear in your files! 3.6 Attributions This week’s practical uses content and inspiration from: Wilkin, J. 2020. Analysing school access to greenspace in London. [Source] Dijk, J.V. 2021. Spatial Operations. [Source] 3.7 References (see reading list) Gitbook: [R Programming] Gimond, M. (2021) Intro to GIS and spatial analysis. Chapter 8: Spatial operations and vector overlays Click link Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; systems, Chapter 13: Spatial Analysis Click link Gitbook: [R Programming] Lovelace, R., Nowosad, J. and Muenchow, J. (2021) Geocomputation with R, Chapter 4: Spatial data operations Click link Gitbook: [R Programming] Lovelace, R., Nowosad, J. and Muenchow, J. 2021. Geocomputation with R, Chapter 5: Geometry operations Click link Paper: [Research] Bijnens, E. et al (2020). Residential green space and child intelligence and behavior across urban, suburban, and rural areas in Belgium: A longitudinal birth cohort study of twins. PLOS Medicine 17(8), e1003213. Click link 3.8 Data Sources UK Shape files for different geographic units [Source: Office for National Statistics, Open Geography Portal] Click Here UK OS Greenspace open data [Source: Ordinance Survey] Click Here Earthquake Catalog data [Source: USGS - Science for a changing world] Click Here The national &amp; administrative areas for Turkiye [Source: Database of Global Administrative Areas] Click Here Building footprints in Türkiye [Source: The Humanitarian Data Exchange] Click Here 3.9 Practical homework Geoprocessing of spatial-referenced natural hazards: Earthquakes There are severe economic and social consequence of natural hazards such as earthquakes which result innumerable disasters that are instant (e.g., deaths, injury, homes destroyed, transport and communication links disrupted, water pipes burst and water supplies contaminated and many more) and long-term (e.g., disease may spread, re-housing, and most often refugee camps). You can download freely available open-source data on earthquake occurrence worldwide here: https://earthquake.usgs.gov/earthquakes/search/ Türkiye (or Turkey) is a nation that often experience earthquakes on a frequent basis with nearly over 20 earth tremors in 2022 according to the Turkish Disaster &amp; Emergency Management Authority. You can download the dataset for this homework exercise: [CLICK HERE] You are given the following spatial datasets: All_earthquake_points_in_Turkey.shp: 984-point locations of where earthquakes/tremors occurred in Greece and Türkiye in 2019 to 2023 as a shapefile; gadm41_TUR_1.shp: The administrative areas of Türkiye as a shapefile; and Konya_buildings_at_risk.shp: 25,000+ building footprints from small administrative area in Türkiye called Konya, as a shapefile. Earthquake_point_in_Konya.shp: Single point location of an earthquake that is a focal point in Konya. Your goal for this homework practical is to use the appropriate geoprocessing task to achieve the following tasks: Task 1: Use the dataset All_earthquake_points_in_Turkey.shp and gadm41_TUR_1.shp to visualise the distribution of ALL point locations of where earthquakes had occurred ONLY in Türkiye? Hints: You may want to consider using the following operations: using the st_area() before dissolving to create an outline, and then sub-setting. Task 2: How would you go about calculating the overall numbers of reporte earthquakes for each administrative area in Türkiye? Visualise this output as a map. Hints: You may want to consider creating a new variable total_earthquakes using the st_interects() and lengths() functions. Task 3: Use the dataset Konya_buildings_at_risk.shp and Earthquake_point_in_Konya.shp to create a map showing three ringed buffer zones around the focal point of the earthquake. Within each buffer region estimate the number of buildings that are: At risk of being destroyed if within distance 0-2000m (1st buffer zone); Those that are at risk of being severely damaged if within a distance of 2000-5000m (2nd buffer zone); Those that are at risk of receiving partial damages if within a distance of 5000-9000m (last buffer zone); Hints: You may want to consider using the st_buffer(), st_centroids(), st_interects() and st_difference() functions for capturing the buildings within the 0-2000m (1st ring), 2000-5000m (2nd ring), and 5000-9000m (3rd ring) zones. The expected output should look as follows: "],["spatial-autocorrelation-and-dependence.html", "4 Spatial autocorrelation and dependence 4.1 Introduction 4.2 Case study 4.3 Attributions 4.4 References (see reading list)", " 4 Spatial autocorrelation and dependence 4.1 Introduction 4.1.1 Lecture video (Length: 01:06:42) [Watch on YouTube] 4.1.2 Computer practical video (Length: 02:00:01) [Watch on YouTube] This week, we focus on the first of two key properties of spatial data: spatial dependence. Spatial dependence is the idea that the observed value of a variable in one location is often dependent (to some degree) on the observed value of the same value in a nearby location. For spatial analysis, this dependence can be assessed and measured statistically by considering the level of spatial autocorrelation between values of a specific variable, observed in either different locations or between pairs of variables observed at the same location. Spatial autocorrelation occurs when these values are not independent of one another and instead cluster together across geographic space. A critical first step of spatial autocorrelation is to define the criteria under which a spatial unit (e.g. an areal or point unit) can be understood as a “neighbour” to another unit. As highlighted in previous weeks, spatial properties can often take on several meanings, and as a result, have an impact on the validity and accuracy of spatial analysis. This multiplicity also can be applied to the concept of spatial neighbours which can be defined through adjacency, contiguity or distance-based measures. As the specification of these criteria can impact the results, the definition followed therefore need to be grounded in particular theory that aims to represent the process and variable investigated. 4.1.3 Learning outcomes Understanding the notion that spatial dependence refers to the degree of spatial autocorrelation between independently measured values observed in geographical space. We will learn how to estimate global measures of spatial autocorrelation (e.g., Moran’s I) to provide a singular measure of spatial dependence. We will learn how Local indicators of spatial association (LISA) to perform a similar function but yield multiple location-specific measures of spatial dependence. 4.1.4 Getting started To enable the efficient, repeatable and reproducible functionality of our work, we will use R-Studio’s ability to create and host code as a script. Before we do anything therefore, we will need to create a new R script: File &gt; New File &gt; R Script. Remember, you can save your script with the quick save shortcuts (e.g. cmd + s (mac) / ctrl + s (windows)). 4.1.5 Datasets &amp; setting up the work directory Before you begin, if you have not done so already, please make sure to download all data by clicking here. Create a sub folder called “Week 3” within your “GEOG0114” folder stored in the desktop of your personal computer. Make sure to extract all data from the downloaded zip folder and store it into “Week 3” folder. Use your newly open R script and set the work directory to Week 3’s folder. For Windows, the code for setting the work directory will be: setwd(&quot;C:/Users/AccountName/Desktop/GEOG0114/Week 3&quot;) For MAC, the code for setting the work directory will be: setwd(&quot;/Users/AccountName/Desktop/GEOG0114/Week 3&quot;) 4.1.6 Loading and installing packages We will need to load the following packages from previous practicals: sf: Simple Features tmap: Thematic Mapping tidyverse: Contains a collection of packages to support efficient data managing The above packages sf, tmap and tidyverse should have been installed previously in the last session. Therefore, we do not have to install them again, we only need to activate them using the library() function. There will be some new packages we need to install: nngeo: The nngeo package includes functions for spatial join of layers based on k-nearest neighbor relation between features spdep: Provides access to a collection of functions to create spatial weights matrix objects from polygon contiguities, and testing spatial dependence sp: Provides access to a collection of functions for handling different classes and methods for spatial data data.table: Gives us access to function that deals with faster aggregation of large data frames etc., # install the packages using the install.package() install.packages(&quot;nngeo&quot;) install.packages(&quot;spdep&quot;) install.packages(&quot;sp&quot;) install.packages(&quot;data.table&quot;) # Load the packages with library() library(&quot;tidyverse&quot;) library(&quot;sf&quot;) library(&quot;tmap&quot;) library(&quot;nngeo&quot;) library(&quot;spdep&quot;) library(&quot;sp&quot;) library(&quot;data.table&quot;) 4.2 Case study This week looks at spatial dependence and autocorrelation in detail, focusing on the different methods of assessment. As part of this, we look at the multiple methods to defining spatial neighbours and their suitability of use across different spatial phenomena – and how this approach is used to generate spatial weights for use within these spatial autocorrelation methods as well as their potential to generate spatially-explicit variables. We put these learnings into practice through an analysis of spatial dependence of areal crime data, experimenting with the deployment of different neighbours and the impact of their analyses. For this practical we will look at the distribution of thefts from persons in the borough of Camden. 4.2.1 Neighbours If we want to come up with quantifiable descriptions of variables and how they vary over space, then we need to find ways of quantifying the distance from point to point. When you attach values to the polygons of wards in London, and visualise them, different patterns appear, and the different shapes and sizes of the polygons effect what these patterns look like. There can appear to be clusters, or the distribution can be random. If you want to explain and discuss variables, the underlying causes, and the possible solutions to issues, it becomes useful to quantify how clustered, or at the opposite end, how random these distributions are. This issue is known as spatial autocorrelation. In raster data, variables are measured at regular spatial intervals (or interpolated to be represented as such). Each measurement is regularly spaced from its neighbours, like the pixels on the screen you are reading this from. With vector data, the distance of measurement to measurement, and the size and shape of the “pixel” of measurement becomes part of the captured information. Whilst this can allow for more nuanced representations of spatial phenomena, it also means that the quantity and type of distance between measurements needs to be acknowledged. If you want to calculate the relative spatial relation of distributions, knowledge of what counts as a “neighbour” becomes useful. Neighbours can be neighbours due to euclidean distance (distance in space), or they can be due to shared relationships, like a shared boundary, or they can simply be the nearest neighbour, if there aren’t many other vectors around. Depending on the variable you are measuring the appropriateness of neighbourhood calculation techniques can change. 4.2.1.1 Loading our data sets Now we have the data in the correct folders, we can load and plot the shape data. # load Camden boundaries camden_oas &lt;- st_read(&#39;OAs_camden_2011.shp&#39;, crs=27700) # inspect tm_shape(camden_oas) + tm_polygons() You can see how one of these output areas could have many more neighbours than others, they vary a great deal in size and shape. The dimensions of these objects change over space, as a result the measurements within them must change too. Output areas are designed to convey and contain census information, so they are created in a way that maintains a similar number of residents in each one. The more sparsely populated an OA the larger it is. Output Areas are designed to cover the entirety of the land of England and Wales so they stretch over places where there are no people. In the north of Camden the largest Ouput Areas span over Hampstead Heath, a large park. Let’s explore how to find different kinds of neighbours using the example of one ‘randomly’ selected output area (E00004174) that happens to contain the UCL main campus. # highlight E00004174 tm_shape(camden_oas) + tm_borders(col=&#39;black&#39;) + tm_shape(camden_oas[camden_oas$OA11CD==&#39;E00004174&#39;,]) + tm_fill(col=&#39;red&#39;) 4.2.1.2 Euclidean neighbours The first way we are going to call something a neighbour is by using Euclidean distance. As our OA shapefile is projected in BNG (British National Grid), the coordinates are planar, going up 1 is the same distance as going sideways 1. Even better the coordinates are in metric measurements so it’s easy to make up heuristic distances. Let’s call every output area with a centroid 500m or less away from the centroid of our chosen OA a neighbour: we select only the the centroid of our chosen output area and all other areas (with st_centroid()) we set the maximum number of neighbours we want to find to “50” (with parameter k) we set the maximum distance of calling an OA centroid a neigbour to “500” (with parameter maxdist) we return a sparse matrix that tells us whether each OA is a neighbour or not (with parameter sparse) # assign our chosen OA to a variable chosen_oa &lt;- &#39;E00004174&#39; # identify neighbours chosen_oa_neighbours &lt;- st_nn(st_geometry(st_centroid(camden_oas[camden_oas$OA11CD==chosen_oa,])), st_geometry(st_centroid(camden_oas)), sparse = TRUE, k = 50, maxdist = 500) # inspect class(chosen_oa_neighbours) # get the names (codes) of these neighbours neighbour_names &lt;- camden_oas[chosen_oa_neighbours[[1]],] neighbour_names &lt;- neighbour_names$OA11CD # inspect tm_shape(camden_oas) + tm_borders() + # highlight only the neighbours tm_shape(camden_oas[camden_oas$OA11CD %in% neighbour_names,]) + tm_fill(col = &#39;green&#39;) + # highlight only the chosen OA tm_shape(camden_oas[camden_oas$OA11CD==chosen_oa,]) + tm_fill(col = &#39;red&#39;) + tm_shape(camden_oas) + # overlay the borders tm_borders(col=&#39;black&#39;) 4.2.1.3 Shared boundary neighbours The next way of calculating neighbours takes into account the actual shape and location of the polygons in our shapefile. This has only recently been added to the world of sf(), previously we would have reverted to using the sp() package and others that depend on it such as spdep(). We can create two functions that check whether any polygons share boundaries or overlap one another, and then also check by how much. These new functions are based on the st_relate() function. The different cases of these are known as queen, and rook. These describe the relations in a similar way to the possible chess board movements of these pieces. Note Do have a look at the short lectures by Luc Anselin on Moran’s I, the interpretation of Moran’s I, and neighbours and spatial weights for some additional explanation on measuring spatial autocorrelation with Moran’s I. # for rook case st_rook = function(a, b = a) st_relate(a, b, pattern = &#39;F***1****&#39;) # for queen case st_queen &lt;- function(a, b = a) st_relate(a, b, pattern = &#39;F***T****&#39;) Now that we’ve created the functions lets try them out. # identify neighbours chosen_oa_neighbours &lt;- st_rook(st_geometry(camden_oas[camden_oas$OA11CD==chosen_oa,]), st_geometry(camden_oas)) # get the names (codes) of these neighbours neighbour_names &lt;- camden_oas[chosen_oa_neighbours[[1]],] neighbour_names &lt;- neighbour_names$OA11CD # inspect tm_shape(camden_oas) + tm_borders() + # highlight only the neighbours tm_shape(camden_oas[camden_oas$OA11CD %in% neighbour_names,]) + tm_fill(col = &#39;green&#39;) + tm_shape(camden_oas[camden_oas$OA11CD==chosen_oa,]) + # highlight only the chosen OA tm_fill(col = &#39;red&#39;) + tm_shape(camden_oas) + # overlay the borders tm_borders(col=&#39;black&#39;) Note Because the tolerance of the shared boundaries in the st_rook() pattern and the st_queen() pattern, in this example they both assign the same neighbours. This is true for many non-square polygons as the difference is often given as whether two shapes share one or more points. Therefore the difference can have more to do with the resolution and alignment of your polygons than the actual spatial properties they represent. They can and do find different neighbours in other situations. Follow the grid example in the st_relate() documentation if you want to see it working. 4.2.2 Theft in Camden Now that we have found the different ways of finding neighbours we can consider how they relate to one another. There are two ways of looking at spatial autocorrelation: Global: This is a way of creating a metric of how regularly or irregularly clustered the variables are over the entire area studied. Local: This is the difference between an area and its neighbours. You would expect neighbours to be similar, but you can find exceptional places and results by seeing if places are quantifiably more like or dislike their neighbours than the average other place. But before we start that let’s get into the data we are going to use! We’ll be using personal theft data from around Camden. Our neighbourhood analysis of spatial autocorrelation should allow us to quantify the pattern of distribution of reported theft from persons in Camden in 2019. # load theft data camden_theft &lt;- read.csv(&#39;2019_camden_theft_from_person.csv&#39;) # convert csv to sf object camden_theft &lt;- st_as_sf(camden_theft, coords = c(&#39;X&#39;,&#39;Y&#39;), crs = 27700) # inspect tm_shape(camden_oas) + tm_polygons() + tm_shape(camden_theft) + tm_dots() This is point data, but we are interested in the polygons and how this data relates to the administrative boundaries it is within. Let’s count the number of thefts in each OA. This is a spatial operation that is often called “point in polygon”. As we are just counting the number of occurrences in each polygon it is quite easy. In the future you may often want to aggregate over points for an area, or in reverse assign values from the polygon to the points. # thefts in Camden camden_oas$n_thefts &lt;- lengths(st_intersects(camden_oas, camden_theft)) # inspect tm_shape(camden_oas) + tm_fill(col=&#39;n_thefts&#39;) + tm_borders(lty=&quot;solid&quot;) You can see our map is skewed by central London, meaning that the results in central London (the south of Camden) are so much larger than those in the north that it makes it harder to see the smaller differences between other areas. We’ll take the square root of the number of thefts to remedy this. # square root of thefts camden_oas$sqrt_n_thefts &lt;- sqrt(camden_oas$n_thefts) # inspect tm_shape(camden_oas) + tm_fill(col=&#39;sqrt_n_thefts&#39;) + tm_borders(lty=&quot;solid&quot;) There: a slightly more nuanced picture 4.2.3 Global Moran’s I With a Global Moran’s I we can test how “random” the spatial distribution of these values is. Global Moran’s I is a metric between -1 and 1. -1 is a completely even spatial distribution of values, 0 is a “random” distribution, and 1 is a “non-random” distribution of clearly defined clusters. To calculate the Global Moran’s I you need an adjacency matrix that contains the information of whether or not an OA is next to another. For an even more nuanced view you can include distance, or a distance weighting in the matrix rather than just the TRUE or FALSE, to take into account the strength of the neighbourhoodness. Because of the way Moran’s I functions in R it is necessary to use the sp and spdep libraries (which we have loaded earlier). As you will see these methods and functions have quite esoteric and complicated syntax. Some of the operations they will do will be similar to the examples shown earlier, but the way they assign and store variables makes it much quicker to run complex spatial operations. # inspect class(camden_oas) ## [1] &quot;sf&quot; &quot;data.frame&quot; # convert to sp camden_oas_sp &lt;- as_Spatial(camden_oas, IDs=camden_oas$OA11CD) # inspect class(camden_oas_sp) ## [1] &quot;SpatialPolygonsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; Now we can make the esoteric and timesaving “nb” object in which we store for each OA which other OAs are considered to be neighbours. # create an nb object camden_oas_nb &lt;- poly2nb(camden_oas_sp, row.names=camden_oas_sp$OA11CD) # inspect class(camden_oas_nb) ## [1] &quot;nb&quot; # inspect str(camden_oas_nb,list.len=10) ## List of 749 ## $ : int [1:7] 10 15 215 303 327 375 464 ## $ : int [1:5] 19 72 309 365 430 ## $ : int [1:3] 133 152 709 ## $ : int [1:7] 78 131 152 286 314 582 651 ## $ : int [1:5] 67 316 486 492 703 ## $ : int [1:8] 7 68 317 487 556 612 625 638 ## $ : int [1:3] 6 68 317 ## $ : int [1:7] 57 58 164 358 429 605 684 ## $ : int [1:5] 58 164 489 609 700 ## $ : int [1:7] 1 215 245 311 327 366 644 ## [list output truncated] ## - attr(*, &quot;class&quot;)= chr &quot;nb&quot; ## - attr(*, &quot;region.id&quot;)= chr [1:749] &quot;E00004395&quot; &quot;E00004314&quot; &quot;E00004578&quot; &quot;E00004579&quot; ... ## - attr(*, &quot;call&quot;)= language poly2nb(pl = camden_oas_sp, row.names = camden_oas_sp$OA11CD) ## - attr(*, &quot;type&quot;)= chr &quot;queen&quot; ## - attr(*, &quot;sym&quot;)= logi TRUE Next, we need to assign weights to each neighbouring polygon. In our case, each neighbouring polygon will be assigned equal weight with style='W'. After this, we can calculate a value for the Global Moran’s I. # create the list weights object nb_weights_list &lt;- nb2listw(camden_oas_nb, style=&#39;W&#39;) # inspect class(nb_weights_list) ## [1] &quot;listw&quot; &quot;nb&quot; # Moran&#39;s I mi_value &lt;- moran(camden_oas_sp$n_thefts,nb_weights_list,n=length(nb_weights_list$neighbours),S0=Szero(nb_weights_list)) # inspect mi_value ## $I ## [1] 0.4772137 ## ## $K ## [1] 75.21583 The Global Moran’s I seems to indicate that there is indeed some spatial autocorrelation in our data, however, this is just a quick way to check the score. To do so properly we need to compare our score a randomly distributed version of the variables. We can do this by using something called a Monte Carlo simulation. # run a Monte Carlo simulation 599 times mc_model &lt;- moran.mc(camden_oas_sp$n_thefts, nb_weights_list, nsim=599) # inspect mc_model ## Monte-Carlo simulation of Moran I ## ## data: camden_oas_sp$n_thefts ## weights: nb_weights_list ## number of simulations + 1: 600 ## ## statistic = 0.47721, observed rank = 600, p-value = 0.001667 ## alternative hypothesis: greater This model shows that our distribution of thefts differs significantly from a random distribution. As such, we can conclude that there is significant spatial autocorrelation in our theft data set. 4.2.4 Local Moran’s I (or LISA) With a measurement of local spatial autocorrelation we could find hotspots of theft that are surrounded by areas of much lower theft. According to the previous global statistic these are not randomly distributed pockets but would be outliers against the general trend of clusteredness! These could be areas that contain very specific locations, where interventions could be made that drastically reduce the rate of crime rather than other areas where there is a high level of ambient crime. # create an nb object camden_oas_nb &lt;- poly2nb(camden_oas_sp, row.names=camden_oas_sp$OA11CD) # create the list weights object nb_weights_list &lt;- nb2listw(camden_oas_nb, style=&#39;W&#39;) # Local Moran&#39;s I local_moran_camden_oa_theft &lt;- localmoran(camden_oas_sp$n_thefts, nb_weights_list) To properly utilise these local statistics and make an intuitively useful map, we need to combine them with our crime count variable. Because of the way the new variable will be calculated, we first need to rescale our variable so that the mean is 0. # rescale camden_oas_sp$scale_n_thefts &lt;- scale(camden_oas_sp$n_thefts) To compare this rescaled value against its neighbours, we subsequently need to create a new column that carries information about the neighbours. This is called a spatial lag function. The “lag” just refers to the fact you are comparing one observation against another, this can also be used between timed observations. In this case, the “lag” we are looking at is between neighbours. # create a spatial lag variable camden_oas_sp$lag_scale_n_thefts &lt;- lag.listw(nb_weights_list, camden_oas_sp$scale_n_thefts) Now we have used sp for all it is worth it’s time to head back to the safety of sf() before exploring any forms of more localised patterns. # convert to sf camden_oas_moran_stats &lt;- st_as_sf(camden_oas_sp) To make a human readable version of the map we will generate some labels for our findings from the Local Moran’s I stats. This process calculates what the value of each polygon is compared to its neighbours and works out if they are similar or dissimilar and in which way, then gives them a text label to describe the relationship. # set a significance value sig_level &lt;- 0.1 # classification with significance value camden_oas_moran_stats$quad_sig &lt;- ifelse(camden_oas_moran_stats$scale_n_thefts &gt; 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &gt; 0 &amp; local_moran_camden_oa_theft[,5] &lt;= sig_level, &#39;high-high&#39;, ifelse(camden_oas_moran_stats$scale_n_thefts &lt;= 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &lt;= 0 &amp; local_moran_camden_oa_theft[,5] &lt;= sig_level, &#39;low-low&#39;, ifelse(camden_oas_moran_stats$scale_n_thefts &gt; 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &lt;= 0 &amp; local_moran_camden_oa_theft[,5] &lt;= sig_level, &#39;high-low&#39;, ifelse(camden_oas_moran_stats$scale_n_thefts &lt;= 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &gt; 0 &amp; local_moran_camden_oa_theft[,5] &lt;= sig_level, &#39;low-high&#39;, ifelse(local_moran_camden_oa_theft[,5] &gt; sig_level, &#39;not-significant&#39;, &#39;not-significant&#39;))))) # classification without significance value camden_oas_moran_stats$quad_non_sig &lt;- ifelse(camden_oas_moran_stats$scale_n_thefts &gt; 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &gt; 0, &#39;high-high&#39;, ifelse(camden_oas_moran_stats$scale_n_thefts &lt;= 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &lt;= 0, &#39;low-low&#39;, ifelse(camden_oas_moran_stats$scale_n_thefts &gt; 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &lt;= 0, &#39;high-low&#39;, ifelse(camden_oas_moran_stats$scale_n_thefts &lt;= 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &gt; 0, &#39;low-high&#39;,NA)))) To understand how this is working we can look at the data non-spatially. As we rescaled the data, our axes should split the data neatly into their different area vs spatial lag relationship categories. Let’s make the scatterplot using the scaled number of thefts for the areas in the x axis and their spatially lagged results in the y axis. # plot 1 # plot the results without the statistical significance ggplot(camden_oas_moran_stats, aes(x = scale_n_thefts, y = lag_scale_n_thefts, color = quad_non_sig)) + geom_vline(xintercept = 0) + # plot vertical line geom_hline(yintercept = 0) + # plot horizontal line xlab(&#39;Scaled Thefts (n)&#39;) + ylab(&#39;Lagged Scaled Thefts (n)&#39;) + labs(colour=&#39;Relative to neighbours&#39;) + geom_point() # plot 2 # plot the results with the statistical significance ggplot(camden_oas_moran_stats, aes(x = scale_n_thefts, y = lag_scale_n_thefts, color = quad_sig)) + geom_vline(xintercept = 0) + # plot vertical line geom_hline(yintercept = 0) + # plot horizontal line xlab(&#39;Scaled Thefts (n)&#39;) + ylab(&#39;Lagged Scaled Thefts (n)&#39;) + labs(colour=&#39;Relative to neighbours&#39;) + geom_point() Now let’s see how they are arranged spatially. # map all of the results here tm_shape(camden_oas_moran_stats) + tm_fill(col = &#39;quad_non_sig&#39;, palette = c(&quot;#de2d26&quot;, &quot;#fee0d2&quot;, &quot;#deebf7&quot;, &quot;#3182bd&quot;)) # map only the statistically significant results here # map only the statistically significant results here tm_shape(camden_oas_moran_stats) + tm_fill(col = &#39;quad_sig&#39;, palette = c(&quot;#de2d26&quot;, &quot;#fee0d2&quot;, &quot;white&quot;)) + tm_borders(col = &quot;grey&quot;) As our data are so spatially clustered we can’t see any outlier places (once we have ignored the non-significant results). This suggests that the pattern of theft from persons is not highly concentrated in very small areas or particular Output Areas, and instead is spread on a larger scale than we have used here. To go further than we have today it would be possible to run the exact same code but using a larger scale, perhaps LSOA, or Ward, and compare how this changes the Moran’s I statistics globally and locally. Or, to gain statistical significance in looking at the difference between areas getting more data perhaps over a longer timescale, where there are less areas with 0 thefts. 4.3 Attributions This week’s practical uses content and inspiration from: Long, A. 2020. Spatial autocorrelation. [Source] Dijk, J.V. 2021. Spatial autocorrelation. [Source] Gimond, M. 2021. Spatial autocorrelation in R. [Source] 4.4 References (see reading list) Gitbook: [R Programming] Gimond, M. (2021) Intro to GIS and spatial analysis. Chapter 13: Spatial autocorrelation Click link Book: [Theory] Longley, P. et al (2015) Geographic Information Science &amp; systems (4th Edition); Chapter 2: The Nature of Geographic Data Click link Book: [Theory] Longley, P. _*et al_ (2015) Geographic Information Science &amp; systems (4th Edition); Chapter 13: Spatial Analysis Click link Paper: [Research] Radil, S. 2016. Spatial analysis of crime. In: Huebner, B. and Bynum, T. The Handbook of Measurement Issues in Criminology and Criminal Justice, Chapter 24, pp.536-554. Click link (Note: use of your UCL login via institutional organisation (UK Federation) is required to access the digital paper) "],["suitability-mapping-part-1.html", "5 Suitability Mapping: Part 1 5.1 Introduction 5.2 Suitability mapping using Simple Overlays 5.3 Analytical Hierarchy Process (AHP) 5.4 References (see reading list)", " 5 Suitability Mapping: Part 1 5.1 Introduction 5.1.1 Lecture video (TBC) 5.1.2 Computer practical video (Length: 02:00:01) [Watch on YouTube] Now, with the proliferation of open spatial dataset, risk models derived from environmental, sociodemographic and topological factors are becoming increasingly available for open research. Such models have broadly shown to be useful in delineating geographical areas of risk or suitability for a certain outcomes. Today, we are going to explore this qualitatively using a knowledge-driven approach. 5.1.3 Learning outcomes To provide an introductory overview to the applicability of knowledge-driven methods, in particular, we are going to learn the Multi-Criteria Decision Approach (MCDA) which is a method that use decision rules from existing knowledge to identify areas potential suitability for an outcome. It is especially useful in data-sparse situations, or when for the first time exploring the potential geographical limits of certain outcome. For instance, using modest number of raster layers such as population density, urbanisation, approximating to street segments, house prices and deprivation; it is possible to combine such information so to determine regions for which crime events such as burglaries are likely to occur, or suitable in that matter. This approach has been widely used in a number of disciplines over the last decades, and has gained prominence in public health related fields such as vector-borne disease prevention, and disaster sciences such as landslides. We will learn how to apply these methods to the two context. 5.1.4 Datasets &amp; setting up the work directory Before you begin do make sure to download all data by clicking here. Create a folder on called “Week 4” within your “GEOG0114” folder stored in the desktop of your personal computer. Make sure to extract all data from the zip folder and store it into “Week 4” folder. Open a new R script and set the work directory to Week 4’s folder. For Windows, the work directory will be: setwd(&quot;C:/Users/AccountName/Desktop/GEOG0114/Week 4&quot;) For MAC, the work directory will be: setwd(&quot;/Users/AccountName/Desktop/GEOG0114/Week 4&quot;) 5.1.5 Loading and installing packages We will need to load the following packages: sf: Simple Features tmap: Thematic Mapping sp: Package for providing classes for spatial data (points, lines, polygons and grids) The above packages sf, tmap &amp; sp should have been installed in the previous session(s). We will need to install a new package: raster: Raster/gridded data analysis and manipulation spatialEco: Spatial Analysis and Modelling Utilities package, which provides the user further functions such as raster.invert() which we will need in the third section. BAMMtools: It provides the user access to an important function getJenksBreaks() for the AHP analysis in the third section. # Install the packages: spatialEco using the install.package() install.packages(&quot;spatialEco&quot;) install.packages(&quot;BAMMtools&quot;) install.packages(&quot;raster&quot;) # Load the packages with library() library(&quot;sf&quot;) library(&quot;tmap&quot;) library(&quot;raster&quot;) library(&quot;sp&quot;) library(&quot;spatialEco&quot;) library(&quot;BAMMtools&quot;) 5.1.6 Loading datasets We will be dealing with raster data only for this exercise. These will be a series of climate, environmental and other social-anthropogenic gridded data from Kenya. We are going to combine them in order to determine areas that are suitable for disease transmission of Lymphatic Filariasis, a neglected tropical disease, caused by a range of mosquitoes that spread the parasitic worms called the Wuchereria bancrofti through a mosquito bite. There is evidence that indicates that precipitation, temperature, population density, aridity, dryness, land surface elevation and vegetation are risk factors for mosquito infestation, and in turn, greatly influencing the way mosquitoes breed and feeding behaviour within human dwellings thus maintaining disease transmission. We will use the following techniques for mapping areas of suitability: Binary Classification &amp; Ranking Suitability Mapping using Weighted Overlay Analysis MCDA Mapping Lets begin loading the following list of raster files, each is a variable of interest: Raster: Mean Temperature in Kenya (1000m resolution) named Kenya Mean Teperature.tif Raster: Normalized Difference Vegetation Index in Kenya (1000m resolution) named Kenya NDVI.tif Raster: Precipitation in Kenya (1000m resolution) named Kenya Precipitation.tif Raster: Population Density in Kenya (1000m resolution) named Kenya Population Density.tif Raster: Land Surface Elevation in Kenya (1000m resolution) named Kenya Elevation.tif Raster: Levels of Dryness in Kenya (1000m resolution) named Kenya Aridity Index.tif temp &lt;- raster(&quot;Kenya Mean Teperature.tif&quot;) nvdi &lt;- raster(&quot;Kenya NDVI.tif&quot;) prec &lt;- raster(&quot;Kenya Precipitation.tif&quot;) popl &lt;- raster(&quot;Kenya Population Density.tif&quot;) elev &lt;- raster(&quot;Kenya Elevation.tif&quot;) arid &lt;- raster(&quot;Kenya Aridity Index.tif&quot; Load the shapefile nation and state borders for Kenya: Shape file: Kenya’s National border named Kenya_Border_3857.shp Shape file: Kenya’s State border named Kenya_States_3857.shp # load the shapefiles kenya_border &lt;- st_read(&quot;Kenya_Border_3857.shp&quot;) kenya_states &lt;- st_read(&quot;Kenya_States_3857.shp&quot;) IMPORTANT NOTES: All shape file and raster data were in projected to the CRS: Spherical mercator 3857 You can inspect each raster to know its dimension, extent, resolution and minimum and maximum values. Since are going to stack all the rasters together, you definitely want the: dimension, extent and resolution to be the same. If there’s a slight difference the stack won’t work. # for instance temp and aridity temp arid To visualize raster data - you can write the following code: # For instance take the mean temperature for Kenya # Spectral colours are useful for diverging scales &quot;Spectral&quot; is Rd-Or-Yl-Gr-Bu. &quot;-Spectral&quot; reverses the order tm_shape(temp) + tm_raster(style = &quot;cont&quot;, title = &quot;Mean Temperature&quot;, palette= &quot;-Spectral&quot;) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) 5.2 Suitability mapping using Simple Overlays 5.2.1 Setting up binary classification on raster One thing to know about this approach - the mappings are purely knowledge-driven and not analytical. For instance, according to previous studies (see example of papers: 1 &amp; 2), we have learnt a bit about the limits or thresholds for these predictors from or below which we can consider an area being suitable for the occurrence of Lymphatic Filariasis (LF). We have summarized these limits or thresholds in a table as follows: Risk factor Threshold for suitability Temperature &gt; 15.0 (degree Celsius) Precipitation &gt; 350 (mm of rainfall) Aridity &gt; 0.20 (i.e., semi-arid (&gt; 0.5) dry sub-humid) Elevation &lt; 1200m (low land) Population Density &gt; 0 (Inhabitants must exist source for blood meal) NDVI &gt; 0.5 (mild levels of vegetation) We should use the aforementioned thresholds to produce binary or Boolean maps using the above criteria. This means that the pixel values of each raster layer will be equal to 0 indicating that its an unsuitable condition for LF transmission, and 1 for suitable conditions for LF transmission. Let us reclassify each layer according to the above criteria, starting with temperature: # reclassify temperature as a binary or Boolean layer temp # lowest value = 1.2 # highest value = 29.6 # reclassify anything below 15 as 0, and the rest above 15 as 1 # reclassify the values into two groups # all values &gt; 0 and &lt;= 15 change to 0 # all values &gt; 15 and &lt;= 30 change to 1 temp_cl &lt;- c(0, 15, 0, 15, 30, 1) # convert into a matrix format temp_cl_mat &lt;- matrix(temp_cl, ncol = 3, byrow = TRUE) # see matrix temp_cl_mat # apply matrix to reclassify() function to categorize the raster accordingly temp_recl &lt;- reclassify(temp, temp_cl_mat) When you reclassify the raster for temp to temp_recl. This is what the output should look like: tm_shape(temp_recl) + tm_raster(style = &quot;cat&quot;, title = &quot;Temperature&quot;, palette= c(&quot;grey&quot;, &quot;#F1948A&quot;), labels = c(&quot;Unsuitable (&lt;15.0)&quot;, &quot;Suitable (15 &amp; above)&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) Lets repeat the same steps for elevation to reclassify it’s layer according to the given criteria: # reclassify elevation as a binary or Boolean layer elev # lowest value = -11m (below sea level) # highest value = 4865m (above sea level) # reclassify anything below 1200m as 1, and the rest above 1200m as 0 # all values &gt; -12 and &lt;= 1199.999 change to 0 # all values &gt; 1199.999 and &lt;= 4900 change to 1 elev_cl &lt;- c(-12, 1199.999, 1, 1199.999, 4900, 0) # convert into a matrix format elev_cl_mat &lt;- matrix(elev_cl, ncol = 3, byrow = TRUE) # see matrix elev_cl_mat # apply matrix to reclassify() function to categorize the raster accordingly elev_recl &lt;- reclassify(elev, elev_cl_mat) The elevation output should look something like: tm_shape(elev_recl) + tm_raster(style = &quot;cat&quot;, title = &quot;Elevation&quot;, palette= c(&quot;grey&quot;, &quot;orange&quot;), labels = c(&quot;Unsuitable (&gt;1200m)&quot;, &quot;Suitable (1200m &amp; below)&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) Try reclassifying the remaining raster arid, prec, popl and ndvi. The solutions are provided in the code chunks below. Click here Solutions # nvdi nvdi nvdi_cl &lt;- c(-1, 0.5, 0, 0.5, 0.9, 1) nvdi_cl_mat &lt;- matrix(nvdi_cl, ncol = 3, byrow = TRUE) nvdi_cl_mat nvdi_recl &lt;- reclassify(nvdi, nvdi_cl_mat) tm_shape(nvdi_recl) + tm_raster(style = &quot;cat&quot;, title = &quot;NDVI (Vegetation)&quot;, palette= c(&quot;grey&quot;, &quot;green&quot;), labels = c(&quot;Unsuitable (0.5 &amp; Below)&quot;, &quot;Suitable (&gt; 0.5)&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) # prec prec prec_cl &lt;- c(0, 350, 0, 350, 2700, 1) prec_cl_mat &lt;- matrix(prec_cl, ncol = 3, byrow = TRUE) prec_cl_mat prec_recl &lt;- reclassify(prec, prec_cl_mat) tm_shape(prec_recl) + tm_raster(style = &quot;cat&quot;, title = &quot;Precipitation (mm)&quot;, palette= c(&quot;grey&quot;, &quot;skyblue&quot;), labels = c(&quot;Unsuitable (350mm &amp; Below)&quot;, &quot;Suitable (&gt; 350mm)&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) # popl popl popl_cl &lt;- c(-1, 0, 0, 0, 126300, 1) popl_cl_mat &lt;- matrix(popl_cl, ncol = 3, byrow = TRUE) popl_cl_mat popl_recl &lt;- reclassify(popl , popl_cl_mat) tm_shape(popl_recl) + tm_raster(style = &quot;cat&quot;, title = &quot;Population density&quot;, palette= c(&quot;grey&quot;, &quot;orange&quot;), labels = c(&quot;Unsuitable (0 people)&quot;, &quot;Suitable (at least 1 person)&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) # arid arid arid_cl &lt;- c(0, 0.20, 0, 0.20, 3, 1) arid_cl_mat &lt;- matrix(arid_cl, ncol = 3, byrow = TRUE) arid_cl_mat arid_recl &lt;- reclassify(arid, arid_cl_mat) tm_shape(arid_recl) + tm_raster(style = &quot;cat&quot;, title = &quot;Aridity (Dryness)&quot;, palette= c(&quot;grey&quot;, &quot;orange&quot;), labels = c(&quot;Unsuitable (0.2 &amp; below)&quot;, &quot;Suitable (&gt; 0.2)&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) 5.2.2 Finding areas of suitability by multiplying the binary rasters We can identify the environmentally suitable areas for occurrence of LF by simply multiplying the binary maps. Therefore, only the cells or areas with the value of 1 will be kept in the output raster layer. You can do this by writing the following formula: Suitable_LF_Binary &lt;- temp_recl*nvdi_recl*prec_recl*elev_recl*popl_recl*arid_recl Visualizing the output: tm_shape(Suitable_LF_Binary) + tm_raster(style = &quot;cat&quot;, title = &quot;&quot;, palette=c(&quot;#f0f0f0&quot;, &quot;red&quot;), labels=c(&quot;Zone: Not Suitable&quot;, &quot;Zone: Highly Suitable&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_text(&quot;NAME_1&quot;, size = &quot;AREA&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) IMPORTANT NOTES: Red region corresponds to areas that are highly suitable for LF. South East of Kenya (i.e., Kwale, Kilifi and Lamu) are environmental suitable based on binary classification 5.2.3 Finding areas of suitability by summing the binary rasters We can identify the environmentally suitable areas for occurrence of LF by simply summing the binary maps generate ratings for each pixel to show the intensity of suitability for LF. A pixel with a summed value would mean the following: 0 would mean that none of the six factors are present at pixel. 1 would mean at least one out of the six factors are present at that pixel. 2 would mean at least two out of the six risk factors are present at that pixel (and so on…) 6 is the maximum meaning that all factors are present there. Therefore, pixel is rated as the highest levels of suitability for LF. To sum up the raster, we would first need to use the stack() function before using the calc() for the summation. RasterStack &lt;- stack(temp_recl, nvdi_recl, prec_recl, elev_recl, popl_recl, arid_recl) Suitable_LF_Summed &lt;- calc(RasterStack, sum) # check for minimum and maximum Suitable_LF_Summed@data@min Suitable_LF_Summed@data@max # minimum = 2 # maximum = 6 Visualizing the output: tm_shape(Suitable_LF_Summed) + tm_raster(style = &quot;cat&quot;, title = &quot;Suitability score&quot;, palette=c(&quot;#FDFEFE&quot;, &quot;#FADBD8&quot;, &quot;#F5B7B1&quot;, &quot;#F1948A&quot;, &quot;#E74C3C&quot;), labels=c(&quot;Low (2)&quot;, &quot;Modest (3)&quot;, &quot;Medium (4)&quot;, &quot;High (5)&quot;, &quot;Highest (6)&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_text(&quot;NAME_1&quot;, size = &quot;AREA&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) IMPORTANT NOTES: Using this approach allows the user to see of the fly the intensity for LF suitability. States such as Mandera, Wajir, Isiolo and Turkana have areas that have largely low or modest ratings for LF suitability. Whereas, again the highly suitable areas for LF are the South East states (i.e., Kwale, Kilifi and Lamu). The rating approach is much better because you can see the intensity for LF suitability. Both approaches highly accessible especially for data and public health program managers in sub-Saharan Africa. These kinds of maps are particularly useful to optimize resources (especially within a low-resource setting) for identifying high-risk areas through knowledge-driven approach (and averting to survey potential unsuitable areas to not wasting limited resources). This approach is great for descriptive knowledge-based decision analysis; however, it does not take into account the factor that certain variables have more importance than others. For instance, precipitation is significantly more important than NDVI because elevated levels of rainfall has a positive impact on a mosquitoes’ survival lifespan and it provides an reservoir for female mosquitoes to breed in standing water. Higher rainfall within a densely populated environment provides not only a breeding ground, but a location closer to their food source (i.e., human and animal blood). Thus, population density is important an factor above NDVI but not as important as precipitation (i.e., high importance: precipitation &gt; population density &gt; NDVI :less importance). We can take this into account by applying weights for each variable determined by importance for the MCDA process - this approach is referred to as the Saaty’s Analytical Hierarchy Process (AHP). Let us see how we apply this methodology. 5.3 Analytical Hierarchy Process (AHP) 5.3.1 Standardizing the raster variables to the same scale (from 1 to 10) We are going to use Saaty’s Analytical Hierarchy Process (AHP). We will need to standardize our raster factors in order to make comparisons and combination possible, as all of them contain different measures: temp (degree Celsius), prec (mm), elev (meters), popl (counts/sqkm); while nvdi and arid are derived indices without any units. Before deriving the weights and applying to the equation that is a linear combination of the above variables to estimate the suitability index for LF, we can standardize them using the Jenks Natural Breaks algorithm. IMPORTANT NOTES: Jenks Natural Breaks algorithm is the preferred approach because it calculates the optimum breakpoints while seeking to minimize the variance within categories, and at the same time maximizing the variance between categories. Let’s begin to standardize the first variable temp. There is a bit of data cleaning involved - here is the code for to calculate the breaks using Jenks algorithm to get the raster scales from 1 to 10. # cleaning for temp # Extract values from Raster tempValues &lt;- values(temp) # Change the values from vector object to data.frame object tempDF &lt;- as.data.frame(tempValues) # Remove missing values and reapply column name tempDF &lt;- as.data.frame(tempDF[!is.na(tempDF$tempValues),]) colnames(tempDF) &lt;- &quot;tempValues&quot; # Use the getJenksBreaks() function. Sample 0.10 (10%) of the pixels #---at random and base the categorisation on this. # NOTE: Doing this on the full data will take forever - so use the subset argument. tempJenks &lt;- getJenksBreaks(tempDF$tempValues, 10, subset = nrow(tempDF)*0.10) # See value in vector tempJenks # shows first element tempJenks[1] # shows second element tempJenks[2] # so on and so further... # Create categorisation by using the Jenks values in the vector temp_jenks_cl &lt;- c(temp@data@min-1, tempJenks[1], 1, tempJenks[1], tempJenks[2], 2, tempJenks[2], tempJenks[3], 3, tempJenks[3], tempJenks[4], 4, tempJenks[4], tempJenks[5], 5, tempJenks[5], tempJenks[6], 6, tempJenks[6], tempJenks[7], 7, tempJenks[7], tempJenks[8], 8, tempJenks[8], tempJenks[9], 9, tempJenks[9], temp@data@max+1, 10) # create matrix temp_jenks_cl_mat &lt;- matrix(temp_jenks_cl, ncol = 3, byrow = TRUE) # view categorisation in matrix temp_jenks_cl_mat # reclassify original raster using the jenks classifications temp_jenks_recl &lt;- reclassify(temp, temp_jenks_cl_mat) Visualize the output with the scale from 1 to 10: tm_shape(temp_jenks_recl) + tm_raster(style = &quot;cont&quot;, title = &quot;Temp (on Jenks scale)&quot;, palette= &quot;-Spectral&quot;) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) We need to repeat this process of reclassification and standardization using natural breaks for the remaining raster grids for prec, popl and ndvi. The solutions are provided in the hidden code chunks below. For elev, we will treat this differently. Note that for arid we are going to treat as a constraint (i.e., binary). Anything below 0.2 threshold are environments considered as hyperarid (extremely dry) areas and thus mosquitoes are non-existent there (- meaning that there is no point for us to include that part of the map wit hyperarid environments in the suitability analysis!). Note that we will use the existing arid_recl raster later to cancel out those areas from the final AHP generated map! Click here Solutions # 2 prec # Extract values from Raster precValues &lt;- values(prec) # Change the values from vector object to data.frame object precDF &lt;- as.data.frame(precValues) # Remove missing values and reapply column name precDF &lt;- as.data.frame(precDF[!is.na(precDF$precValues),]) colnames(precDF) &lt;- &quot;precValues&quot; # Use the getJenksBreaks() function. Sample 0.10 (10%) of the pixels at random and base the categorisation on this. # NOTE: Doing this on the full data will take forever - so use the subset argument. precJenks &lt;- getJenksBreaks(precDF$precValues, 10, subset = nrow(precDF)*0.10) # See value in vector precJenks # shows first element precJenks[1] # shows second element precJenks[2] # so on and so further... # Create categorisation by using the Jenks values in the vector prec_jenks_cl &lt;- c(prec@data@min-1, precJenks[1], 1, precJenks[1], precJenks[2], 2, precJenks[2], precJenks[3], 3, precJenks[3], precJenks[4], 4, precJenks[4], precJenks[5], 5, precJenks[5], precJenks[6], 6, precJenks[6], precJenks[7], 7, precJenks[7], precJenks[8], 8, precJenks[8], precJenks[9], 9, precJenks[9], prec@data@max+1, 10) # create matrix prec_jenks_cl_mat &lt;- matrix(prec_jenks_cl, ncol = 3, byrow = TRUE) # view categorisation in matrix prec_jenks_cl_mat # reclassify original raster using the jenks classifications prec_jenks_recl &lt;- reclassify(prec, prec_jenks_cl_mat) # 3. popl # Extract values from Raster poplValues &lt;- values(popl) # Change the values from vector object to data.frame object poplDF &lt;- as.data.frame(poplValues) # Remove missing values and reapply column name poplDF &lt;- as.data.frame(poplDF[!is.na(poplDF$poplValues),]) colnames(poplDF) &lt;- &quot;poplValues&quot; # Use the getJenksBreaks() function. Sample 0.10 (10%) of the pixels at random and base the categorisation on this. # NOTE: Doing this on the full data will take forever - so use the subset argument. poplJenks &lt;- getJenksBreaks(poplDF$poplValues, 10, subset = nrow(poplDF)*0.10) # See value in vector poplJenks # shows first element poplJenks[1] # shows second element poplJenks[2] # so on and so further... # Create categorisation by using the Jenks values in the vector popl_jenks_cl &lt;- c(popl@data@min-1, poplJenks[1], 1, poplJenks[1], poplJenks[2], 2, poplJenks[2], poplJenks[3], 3, poplJenks[3], poplJenks[4], 4, poplJenks[4], poplJenks[5], 5, poplJenks[5], poplJenks[6], 6, poplJenks[6], poplJenks[7], 7, poplJenks[7], poplJenks[8], 8, poplJenks[8], poplJenks[9], 9, poplJenks[9], popl@data@max+1, 10) # create matrix popl_jenks_cl_mat &lt;- matrix(popl_jenks_cl, ncol = 3, byrow = TRUE) # view categorisation in matrix popl_jenks_cl_mat # reclassify original raster using the jenks classifications popl_jenks_recl &lt;- reclassify(popl, popl_jenks_cl_mat) # 4 nvdi # Extract values from Raster nvdiValues &lt;- values(nvdi) # Change the values from vector object to data.frame object nvdiDF &lt;- as.data.frame(nvdiValues) # Remove missing values and reapply column name nvdiDF &lt;- as.data.frame(nvdiDF[!is.na(nvdiDF$nvdiValues),]) colnames(nvdiDF) &lt;- &quot;nvdiValues&quot; # Use the getJenksBreaks() function. Sample 0.10 (10%) of the pixels at random and base the categorisation on this. # NOTE: Doing this on the full data will take forever - so use the subset argument. # EXTRA NOTE: The values for nvdi are very close to each other and so the algorithm splits it to just two cateogries nvdiJenks &lt;- getJenksBreaks(nvdiDF$tempValues, 2, subset = nrow(nvdiDF)*0.10) # See value in vector nvdiJenks # shows first element nvdiJenks[1] # shows second element nvdiJenks[2] # so on and so further... # Create categorisation by using the Jenks values in the vector nvdi_jenks_cl &lt;- c(nvdi@data@min-1, nvdiJenks[1], 1, nvdiJenks[1], nvdi@data@max+1, 2) # create matrix nvdi_jenks_cl_mat &lt;- matrix(nvdi_jenks_cl, ncol = 3, byrow = TRUE) # view categorisation in matrix nvdi_jenks_cl_mat # reclassify original raster using the jenks classifications nvdi_jenks_recl &lt;- reclassify(nvdi, nvdi_jenks_cl_mat) For elevation, the risk of LF.decreases with higher values for elevation. Therefore, after applying the Jenks intervals, we need to flip the raster values accordingly. # 6. elev # Extract values from Raster elevValues &lt;- values(elev) # Change the values from vector object to data.frame object elevDF &lt;- as.data.frame(elevValues) # Remove missing values and reapply column name elevDF &lt;- as.data.frame(elevDF[!is.na(elevDF$elevValues),]) colnames(elevDF) &lt;- &quot;elevValues&quot; # Use the getJenksBreaks() function. Sample 0.10 (10%) of the pixels at random and base the categorisation on this. # NOTE: Doing this on the full data will take forever - so use the subset argument. elevJenks &lt;- getJenksBreaks(elevDF$elevValues, 10, subset = nrow(elevDF)*0.10) # See value in vector elevJenks # shows first element elevJenks[1] # shows second element elevJenks[2] # so on and so further... # Create categorisation by using the Jenks values in the vector elev_jenks_cl &lt;- c(elev@data@min-1, elevJenks[1], 1, elevJenks[1], elevJenks[2], 2, elevJenks[2], elevJenks[3], 3, elevJenks[3], elevJenks[4], 4, elevJenks[4], elevJenks[5], 5, elevJenks[5], elevJenks[6], 6, elevJenks[6], elevJenks[7], 7, elevJenks[7], elevJenks[8], 8, elevJenks[8], elevJenks[9], 9, elevJenks[9], elev@data@max+1, 10) # create matrix elev_jenks_cl_mat &lt;- matrix(elev_jenks_cl, ncol = 3, byrow = TRUE) # view categorisation in matrix elev_jenks_cl_mat # reclassify original raster using the Jenks classifications elev_jenks_recl &lt;- reclassify(elev, elev_jenks_cl_mat) # see plot in its original form plot(elev_jenks_recl) # Now flip the values by subtracting the values from the max value (here its 10) rev_elev_jenks_recl &lt;- elev_jenks_recl values(rev_elev_jenks_recl) &lt;- elev_jenks_recl@data@max - values(elev_jenks_recl) # see plot flipped/inverted plot(rev_elev_jenks_recl) Visualize the inverted output (NOTE: Blue: High elevation, Red: low elevation): tm_shape(rev_elev_jenks_recl) + tm_raster(style = &quot;cont&quot;, title = &quot;Inverted Elev (on Jenks scale)&quot;, palette= &quot;-Spectral&quot;) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) 5.3.2 Determining the weight of each variable using Saaty’s AHP To estimate the weights, a helpful tool has been developed and provided in an Excel Worksheet. It has been created for you so that you can see how the calculations are carried out step-by-step to derive the weights. You can interact with the cells to see the formulas and explanations are provided at each step. Open the spreadsheet Guidance - AHP Calculator Tool.xlsx and read to follow through the steps carefully. These are steps summarized here: Pairwise comparison &amp; Judgement values: Carry out a pairwise comparison of the factors by constructing a matrix as seen in step 1 in the spreadsheet. Use the criteria and make a “Judgement” on the pairwise variables/factors (it could be based on expert opinion or from literature) asserting a variable’s importance over the other. Matrices: Create a square matrix with the judgement values inserted to the matrix accordingly (see step 2) Reciprocals: Take the reciprocals in the matrix (see step 3) Take column sums: Sum each of the columns accordingly (see step 4) Normalization of matrix: For each element in a column of the square matrix, divide it by it’s corresponding column sum. Repeat this step for all other elements in that matrix (see step 5). Priority Vectors/Weights: Once completed, sum-up the elements across each row and divide it by the number of variables to obtain the priority vector or weights. As a sanity check, you will know that the calculations are correct if the sum of the weights are equal to 1 (see step 6). Validation of whether the judgement values are reasonable: We need to calculate a Consistency Ratio (CR), which is derived from the Consistency Index (CI) divided by the Random Index (RI). For the CI, we must estimate an eigenvalue which is derived from the summed products between the summed column and weights (see step 7 and click on the cell E94 to view the formula). Use that eigenvalue (i.e., Lambda_Max) and estimate the CI (see formula in the lecture notes (slide 25), and click on the cell E95). Next, use the Random Index table (developed by Saaty, 1980) to determine the RI based on the number of factors (in this case, it is 5). Finally, calculate the CR by dividing the CI/RI (see step 7 and click on the cell E111 to view the formula). Note that if the CI &lt; 0.1, the judgement values assigned in step 1 were acceptable. If CR is bigger than 0.1, then the judgement values in the pairwise comparison in step 1 were unreasonable (and thus you will have to repeat the step with different values again until you get an acceptable CR estimate that is below 0.1!). Here, our CR is 0.0351 &lt; 0.1. 5.3.3 Weighted Linear Combination (WLC) and derivation of Suitability Maps based from AHP analysis Our model uses the Weighted Linear Combination (WLC) approach as the decision rule. The formula to estimate the suitability of LF is as follows: Suitability (LF) = \\(w_1x_1 + w_2x_2 + w_3x_3 + w_4x_4 + w_5x_5 + w_6x_6\\) The \\(w_i\\) and \\(x_i\\) represent the weights deprived from AHP analysis and raster variables, respectively. The weights are multiplied to its corresponding raster to obtain a raster with values weighted but ultimately scaled with an upper limit of 10. We will also multiply the summed product with the arid_recl binary raster to retain or constraint the output to non-hyperarid areas (&gt; 0.2). This is the derived formula to use in calculating the suitability regions for LF in RStudio: # use the rescaled columns in the formula suitablemap_WLC &lt;- (0.372*prec_jenks_recl + 0.356*temp_jenks_recl + 0.159*popl_jenks_recl + 0.077*rev_elev_jenks_recl + 0.037*nvdi_jenks_recl) * arid_recl # see plot plot(suitablemap_WLC) Finally, visualize the output: # create custom map by categorising the final raster output suitablemap_WLC_cl &lt;- c(-1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 10, 9) suitablemap_WLC_cl_mat &lt;- matrix(suitablemap_WLC_cl, ncol = 3, byrow = TRUE) suitablemap_WLC_cl_recl &lt;- reclassify(suitablemap_WLC, suitablemap_WLC_cl_mat) tm_shape(suitablemap_WLC_cl_recl) + tm_raster(style = &quot;cat&quot;, title = &quot;LF Suitability (AHP WLC)&quot;, palette= &quot;Reds&quot;, labels=c(&quot;Negligable (\\u22641)&quot;, &quot;&gt;1-2&quot;, &quot;&gt;2-3&quot;, &quot;&gt;3-4&quot;, &quot;&gt;4-5&quot;, &quot;&gt;5-6&quot;, &quot;&gt;6-7&quot;, &quot;&gt;7-8&quot;, &quot;&gt;8-10&quot;)) + tm_shape(kenya_states) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_text(&quot;NAME_1&quot;, size = &quot;AREA&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE, legend.title.size = 0.5, legend.text.size = 0.5) + tm_scale_bar(position = c(&quot;left&quot;,&quot;bottom&quot;)) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) IMPORTANT NOTES: The suitability ranges are estimated to be from 3.27 to 7.49 (weighted on a scale with a upper limit of 10). The highest suitability for LF are regions with values closest to 7.49 and vice versa. 5.4 References (see reading list) 5.4.1 Recommended reading Paper: R.W. Saaty (1987). The Analytical Hierarchy Process - What it is and how it is used, Mathl Modelling, Volume 9(3-5), pages 161 to 176 LINK Technical Document: IDRISI Kilimanjaro: Guide to GIS and Image Processing. Chapter 12: Decision Support - Decision Strategy Analysis, Section on ‘A Typology of Decisions’, pages 151 to 154. DOWNLOAD Paper: A.A. Ali, A. Ahmad (2019). Spatial susceptibility analysis of vector-borne diseases in KMC using geospatial technique and MCDM approach, Modeling Earth Systems and Environment, Issue 5, pages 1135–1159 LINK Paper: X. Zhao et al., (2020). Malaria Risk Map Using Spatial Multi-Criteria Decision Analysis along Yunnan Border During the Pre-elimination Period, Am J Trop Med Hyg, Volume 103 (2), pages 793–809 LINK Paper: B. Ahmed (2015). Landslide susceptibility mapping using multi-criteria evaluation techniques in Chittagong Metropolitan Area, Bangladesh. Landslides, Issue 12, pages 1077–1095 LINK Book: [R Programming] Dorman, M. (2014) Learning R for Geospatial Analysis; Chapter 3: Working with Rasters Click link (Note: Downloadable) 5.4.2 Data Sources The population density 2015 data for Kenya was obtained from Worldpop and resampled at 1km Click Here Raster for annual precipitation was created from bio1_27 and bio1_37, averaged and clipped to Kenya. Obtained for WorldClim Click Here Raster for annual temperature was created from bio1_27 and bio1_37, averaged and clipped to Kenya. Obtained for WorldClim Click Here Aridity Index data was obtained for the Global Aridity and PET Database and clipped to Kenya Click Here Normalized Differenced Vegetation Index was obtained from NASA MODIS Click Here (Registration required). Elevation was obtained from the SRTM CSI CGIAR Project, and cropped to Kenya Click Here "],["suitability-mapping-part-2.html", "6 Suitability Mapping: Part 2 6.1 Introduction 6.2 Data preparation for the MAXENT analysis 6.3 MAXENT Analysis 6.4 Attributions 6.5 References (see reading list) 6.6 Data Sources 6.7 Practical homework", " 6 Suitability Mapping: Part 2 6.1 Introduction 6.1.1 Lecture video (Length: 01:06:42) [Watch on YouTube] 6.1.2 Computer practical video (Length 02:00:01) [Watch on YouTube] Last week, we described how knowledge-driven methods informed by expert opinion (often drawn from experience or literature) can be used to predict locations that are suitable (or favourable) for a specific outcome given a set of environmental factors, which in turn, can be outputted as a thematic raster map. Last week’s approach uses a mixed (i.e., qualitative and quantitative) methodology through the use of Overlay Mapping and Analytical Hierarchy Process (AHP) for suitability mapping, and these approaches are used strictly when there are no point occurrence data. This week, we are using distributional niche models, often term as either: Ecological (or Environmental) Niche Models, or Environmental or Habitat Suitability Models. These are quantitative methods that use occurrence data in conjunction with environmental data to make a correlative model of the environmental conditions that meet an outcome’s environmental (or ecological) requirements, which in turn, can predict the relative suitability of habitat for that outcome. It has many applications in ecology, epidemiology, disaster risk reduction and social sciences (e.g., crime patterns). Today, we are going to use the Maximum Entropy Model (MAXENT) to infer zones for disaster hazards such as wildfires in California given a set of predictor variables (i.e, climate, vegetation, anthropogenic and socioeconomic risk factors which are raster). 6.1.3 Learning outcomes We are going to learn the following steps: Handling of point locations of occurrence data (i.e., points of fires) and preparing it as testing and training data; Handling of predictor variables (i.e., raster) and compiling them into a raster stack object, as well as perform extraction of raster values to the points of fire locations; Generating a Niche model using the maxent() from points, and use the stacked raster values to fit a model to estimate probability (or trigger points) of a fire hazard; Testing for model validation using ROC and AUC curves, and producing a surface based on threshold to delineate regions for suitability (in context probable trigger points for wildfires). 6.1.4 Datasets &amp; setting up the work directory Before you begin do make sure to download all data by clicking here. Create a folder on called “Week 5” within your “GEOG0114” folder stored in the desktop of your personal computer. Make sure to extract all data from the zip folder and store it into “Week 5” folder. Open a new R script and set the work directory to Week 5’s folder. For Windows, the work directory will be: setwd(&quot;C:/Users/AccountName/Desktop/GEOG0114/Week 5&quot;) For MAC, the work directory will be: setwd(&quot;/Users/AccountName/Desktop/GEOG0114/Week 5&quot;) 6.1.5 Loading and installing packages IMPORTANT NOTE: We will need to install Java for the rjava package as well as the maxent() function and other functions associated with performing MAXENT to work. You can download the latest version of Java [HERE] Next, we will need to load the following packages: raster: Raster/gridded data analysis and manipulation sf: Simple Features sp: Package for providing classes for spatial data (points, lines, polygons and grids) spdep: Access to spatial functions such spsample() needed for generating background points tmap: Thematic Mapping The above packages raster sf, sp, spdep &amp; tmap should have been installed in the previous session(s). We will need to install the following new package(s): dismo: Provides access to methods for niches distribution modelling in RStudio. rJava: Low-level interface for Java. The maxent() function depends on this so it must be installed. # Install the packages with install.package(): install.packages(&quot;dismo&quot;) install.packages(&quot;rJava&quot;) # Load the packages with library(): library(&quot;raster&quot;) library(&quot;dismo&quot;) library(&quot;tmap&quot;) library(&quot;sf&quot;) library(&quot;rJava&quot;) library(&quot;spdep&quot;) 6.1.6 Loading datasets We will be dealing with both point occurrence and raster data for this exercise. The point data are remote-sensed fire detection locations across the State of California during the summer period of 2018. We will be using predictor variables that are climatic (i.e., temperature, precipitation, dryness), environmental (vegetation and elevation) and other social-anthropogenic (socioeconomic deprivation) gridded raster data for California. We will combine them into a MAXENT model in order to quantify the areas that are potential trigger points for wildfires, and whether these variables greatly influencing the risk of a fire hazard. Let us begin loading the following list of raster files, each is a variable of interest: Raster: Temperature named California_temperature_summer_2018.tif Raster: Precipitation named California_precipitation_summer_2018.tif Raster: Dryness named California_dryness_summer_2018.tif Raster: Vegetation (NDVI) named California_vegetation_summer_2018.tif Raster: Elevation named California_elevation_summer_2018.tif Raster: Deprivation Index named California_socdeprivation_summer_2018.tif # load data raster data temp &lt;- raster(&quot;California_temperature_summer_2018.tif&quot;) prec &lt;- raster(&quot;California_precipitation_summer_2018.tif&quot;) dryn &lt;- raster(&quot;California_dryness_summer_2018.tif&quot;) ndvi &lt;- raster(&quot;California_vegetation_summer_2018.tif&quot;) elev &lt;- raster(&quot;California_elevation_summer_2018.tif&quot;) sevi &lt;- raster(&quot;California_socdeprivation_summer_2018.tif&quot;) Load the boundary and county shapefile for California: Shape file: California’s boundary border named .shp Shape file: California’s County borders named .shp # load shapefile data for california california_border &lt;- read_sf(&quot;California_boundary.shp&quot;) california_county &lt;- read_sf(&quot;California_county.shp&quot;) Load the point occurrence data for California: # load occurrence fire data in California california_fires &lt;- read.csv(&quot;California_Fire_Summer_2018.csv&quot;) IMPORTANT NOTES: All shape file and raster data (5km resolution) were projected to the CRS: WGS84 4236. The occurrence data imported into RStudio is a data frame object. We will need to first convert the occurrence data from data frame to a spatial points object by declaring columns longitude and latitude corresponds to x and y respectively and thus coordinates in data frame object california_fires # code chunk format coordinates(data.frame) = ~x+y coordinates(california_fires) = ~longitude+latitude Now, we need to define its coordinate reference system for the points which should be the same as any of the raster data. You can get this information by simple typing the raster object to console and printing its info there: # show details of temp as example temp We need to copy the detail under the crs section of out temp output and assign that detail to our points so as it also has a CRS of WGS84 4326. We can use the crs() function to perform this action. Now copy: +proj=longlat +datum=WGS84 +no_defs and use the following code: crs(california_fires) &lt;- &quot;+proj=longlat +datum=WGS84 +no_defs&quot; Let us visualise the study area to examine the spatial distribution of wildfires. tm_shape(california_county) + tm_polygons() + tm_shape(california_fires) + tm_dots(col = &quot;red&quot;) Let us visualise the six predictor raster variables that will be used for the Niche modelling with MAXENT. Instead of visual each output individually - you can use tmap_arrange() to create a figure panel for the six images. # map object of temperature stored in m1 m1 &lt;- tm_shape(temp) + tm_raster(style = &quot;cont&quot;, title = &quot;Celsius&quot;, palette= &quot;Oranges&quot;) + tm_shape(california_county) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.position = c(&quot;right&quot;, &quot;top&quot;), title.position = c(&quot;left&quot;, &quot;bottom&quot;), title = &quot;A&quot;) # map object of precipitation stored in m2 m2 &lt;- tm_shape(prec) + tm_raster(style = &quot;cont&quot;, title = &quot;mm&quot;, palette= &quot;Blues&quot;) + tm_shape(california_county) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.position = c(&quot;right&quot;, &quot;top&quot;), title.position = c(&quot;left&quot;, &quot;bottom&quot;), title = &quot;B&quot;) # map object of dryness stored in m3 m3 &lt;- tm_shape(dryn) + tm_raster(style = &quot;cont&quot;, title = &quot;mm/0.25yr&quot;, palette= &quot;-Spectral&quot;) + tm_shape(california_county) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.position = c(&quot;right&quot;, &quot;top&quot;), title.position = c(&quot;left&quot;, &quot;bottom&quot;), title = &quot;C&quot;) # map object of ndvi stored in m4 m4 &lt;- tm_shape(ndvi) + tm_raster(style = &quot;cont&quot;, title = &quot;Index&quot;, palette= &quot;Greens&quot;) + tm_shape(california_county) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.position = c(&quot;right&quot;, &quot;top&quot;), title.position = c(&quot;left&quot;, &quot;bottom&quot;), title = &quot;D&quot;) # map object of elevation stored in m5 m5 &lt;- tm_shape(elev) + tm_raster(style = &quot;cont&quot;, title = &quot;m&quot;, midpoint = 1500, palette= &quot;-Spectral&quot;) + tm_shape(california_county) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.position = c(&quot;right&quot;, &quot;top&quot;), title.position = c(&quot;left&quot;, &quot;bottom&quot;), title = &quot;E&quot;) # map object of sevi stored in m6 m6 &lt;- tm_shape(sevi) + tm_raster(style = &quot;cont&quot;, title = &quot;%&quot;, palette= &quot;Reds&quot;) + tm_shape(california_county) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.position = c(&quot;right&quot;, &quot;top&quot;), title.position = c(&quot;left&quot;, &quot;bottom&quot;), title = &quot;F&quot;) # stitch the maps together using tmap_arrange() function tmap_arrange(m1, m2, m3, m4, m5, m6, nrow = 2) A: Temperature (degree Celsius); B: Precipitation (mm); C: Dryness (Evapotranspiration) (mm/0.25 year); D: Vegetation (NDVI); E: Elevation (meters [m]); &amp; F: Socioeconomic vulnerability index (%) IMPORTANT NOTES: It is good practice to produce figure outputs of the study area of interest inside the methodology section of an essay, report, dissertation, research paper etc.,. This gives you the opportunity to describe the study area that is under investigation and variables in the methods section. 6.2 Data preparation for the MAXENT analysis 6.2.1 Creating a multi-band raster using the stack() function Basically, a band is represented by a single matrix of cell values, and a raster with multiple bands contains multiple spatially coincident matrices of cell values representing the same spatial area. For example, the raster object for temp (i.e., temperature) is a single band raster object. But, if we start to stack raster objects prec, dryn, ndvi and so on top of temp, one over the other, then we have created a multi-band raster object. We need to create this multi-band raster object to enable the following action needed for the analysis: To perform the extraction of raster values from all 6 variables on to the occurrence points in one go; The entire multi-band raster object is needed for MAXENT estimation and spatial prediction We use the stack() to stack all raster grids into one object and rename the layers within the multi-band object to names that are tenable. envCovariates &lt;- stack(temp, prec, dryn, ndvi, elev, sevi) names(envCovariates) &lt;- c(&quot;Temperature&quot;, &quot;Precipitation&quot;, &quot;Dryness&quot;, &quot;NDVI&quot;, &quot;Elevation&quot;, &quot;Deprivation&quot;) 6.2.2 Preparing data for pseudo-background points as absence We need to prepare the background data. What is the background data? With Background data we are not attempting to guess point locations where an event is absent. Here, we are rather trying to characterise the environment of the study region. In this sense, background is the same, irrespective of where the point fire are found or not. Background data establishes the environmental domain of the study, whilst presence data should establish under which conditions a fire is more likely to be present than on average. In essence, we are creating a set of control points which we act as pseudo-absence. These are typically generated at random. There are several ways of performing this action using other functions such as randomPoints(), sampleRandom and many more. We are using the spsample() function because it allows the user to specify the boundary for which the background points (i.e., controls) should be randomly generated within. Twice the number of occurrence points are generated (the choice of twice is up to the user). For reproducibility in the random generation, we have set the set.seed() function to this 20000430. # set the seed set.seed(20000430) # we need to coerce &#39;sf&#39; object california_border into &#39;sp&#39; object for spsample to work california_border_sp &lt;- as(california_border, Class = &quot;Spatial&quot;) # here, spsample() generates twice number of fire occurrence points randomly within California&#39;s border background_points &lt;- spsample(california_border_sp, n=2*length(california_fires), &quot;random&quot;) 6.2.3 Extraction of all raster values from predictor variables onto presence-absence points Now, we are going to extract information from our envCovariates raster stack to both the presence and background points. This can be done using the extract() function. # perform raster extraction from the environmental covariates on to points california_fires_env &lt;- extract(envCovariates, california_fires) background_points_env &lt;- extract(envCovariates, background_points) IMPORTANT NOTES: After the extraction, the objects california_fires_env and background_points_env exist as a large matrix, and not as a data frame. For all occurrence points (i.e., presence), we need to add an indicator of 1 to signify presence; while for all background points (i.e., absence) - we need to also add an indicator of 0 to signify absence. We do this because we are modelling a probability and such niche models take outcomes that are from a Bernoulli or Binomial distribution. # convert large matrix objects to data frame objects and add outcome `fire` indicator california_fires_env &lt;-data.frame(california_fires_env,fire=1) background_points_env &lt;-data.frame(background_points_env,fire=0) # View one of the data frame head(california_fires_env, n=5) head(background_points_env, n=5) 6.2.4 Preparation of training &amp; test data for prediction &amp; model cross-validation Now, we need to complete one more step before we construct our wildfire risk model. We have to come up with a way to assess how well our model can actually predict whether we will likely find a trigger point for fires in a particular location. To make this assessment, we will need to perform some ‘cross-validation’ i.e., that is setting aside some of our presence-absence locations, and using them to test the model. In our case, we will randomly withhold 25% of the observations as test data, and retain the other 75% as training data for the prediction. This means that we will be fitting the model multiple times, withholding each fourth of the data separately, then average the results. This is called a k-fold cross-validation (in our case 4-fold). However, for our purposes of time, we will just fit the model once to demonstrate what is actually happening for you to get the gist. Ideally, we will need to perform a 4-fold cross-validation and in turn average the estimates across the values for AUC and those for the true positives and negative as described in section 5.4.2. Use the kfold() function to split the presence data from california_fires_env object into 4 equal parts. This should add an index that makes four random groups of observations. You can hold 25% of the data (i.e., the first portion) by specifying select == 1 as the test data. You can hold the remaining 75% of the data (i.e., the 2nd, 3rd and 4th portion) by specifying select != 1 as the training data. # set same set.seed() as before set.seed(20000430) # using k-fold function to split data into 4 equal parts select &lt;- kfold(california_fires_env, 4) # 25% of the fire data use for testing the model california_fires_env_test &lt;- california_fires_env[select==1,] # 75% of the fire data use for training the model california_fires_env_train &lt;- california_fires_env[select!=1,] Repeat the above process for the background points: # set same set.seed() as before set.seed(20000430) # repeat the process for the background points select &lt;- kfold(background_points_env, 4) background_points_env_test &lt;- background_points_env[select==1,] background_points_env_train &lt;- background_points_env[select!=1,] Now, let us row bind the training and test dataset together using the rbind() function: training_data &lt;- rbind(california_fires_env_train, background_points_env_train) testing_data &lt;- rbind(california_fires_env_test, background_points_env_test) We are now in the position to execute the distributional niche models. 6.3 MAXENT Analysis Now, we can fit the niche model using the Maximum Entropy (MAXENT) algorithm, which tries to define the combination of environmental risk factors that best predicts the occurrence of the wildfires in California. The maxent() allows the users to implement such algorithm. Here are some important notes on it’s usage: maxent(): This function uses environmental data for locations of known presence and for a large number of ‘background’ locations. It has three mandatory arguments - x, p, and args. x: In this argument, you must specify the columns of the predictor variables in the training data frame. The first columns in the example are the risk factors we are interested. p: In this argument, you must specify the column containing the presence and absence of fires in the training data frame. args: This allows for additional arguments. Running the maxent() code should look something like: model_training &lt;- maxent(x=training_data[,c(1:6)], p=training_data[,7], args=c(&quot;responsecurves&quot;)) 6.3.1 Examination of the predictor’s contribution and response curves The results are stored in the model_training object. We can examine which variable has the biggest contribution to the presence of wildfire presences in California: plot(model_training, pch=19, xlab = &quot;Percentage [%]&quot;, cex=1.2) IMPORTANT NOTES: We can view the contribution estimates for each covariate more precisely by typing in RConsole the following code: model_training@results. Here, we can see the following contribution estimates: NDVI (44.2321%); Elevation (23.5530%); Deprivation (12.0339%); Dryness (9.9266); Temperature (6.8892%); and Precipitation (3.3653%). The contribution estimates should sum up to 100%. Interpretation: From this plot, we can see that the model is most sensitive to variation in NDVI, followed with additional contributions from land surface elevation, and from increased levels of socioeconomic deprivation (reporting top three). We can examine as well as the likelihood of fire occurrence and how it responds to variation in these conditions. To see the shape of the response curves estimated by the model, we can use the response() function: response(model_training) Interpretation: In the response plots, we are looking at how the probability of fire occurrence (Y-axes, from zero to one) varies with each the environmental predictors (X-axes). From these plots, we can see that the MAXENT models can include complex environmental responses including plateau, linear, and nonlinear shapes, and some which are utterly unclear. For example, if we look at mean temperature during the summer, we can see that the probability for fire occurrence peaks around 0.60 when temperatures are around 30 degrees Celsius. We can also see that the probability of such outcome increases with more and more vegetation during the summer period. Probability in terms of fires in relation to deprivation is a flat line. For precipitation, dryness and elevation - the patterns are unclear. 6.3.2 Model validation An important part is model validation - this involves assessing how well does the model actually predict the occurrence of wildfires. To evaluate the predictive accuracy of the model, we turn back to our test data i.e., testing_data object, and use cross-validation to test the model. In our evaluation - there are two main outputs of interest: AUC (Area Under the Curve), which is a test of model performance where higher values indicate greater accuracy in our predictions. An AUC value of 0.5 is common cut-off point used for assessing model performance. Note that an AUC value of 0.5 or lower is the same as random guessing of presence/absence, while values towards one mean our predictions are more reliable and accurate. max TPR+TNR, which denotes the probability threshold at which our model maximizes the True Positive Rate and the True Negative Rate. It is generally accepted that this is an optimum value at which to set the threshold for binary classification of the predicted probabilities in our mapping outputs. Anything above value is deemed as a region environmentally suitable for outcome. We use the evaluate() function to perform cross-validation analysis. # model evaluation use the test data on the trained model for validation cross_validation &lt;- evaluate(p=testing_data[testing_data$fire==1,], a=testing_data[testing_data$fire==0,], model = model_training) Here are some important notes on it’s usage: evaluate(): This function used for model evaluation and validation. It has the following arguments - p, a, and model. p: In this argument, you must specify the column of outcome and filter on the presence value e.g., testing_data[testing_data$fire==1,]. a: In this argument, you must specify the column of outcome and filter on the absence value e.g., testing_data[testing_data$fire==0,] model: Specify the full training model object e.g., model_training. Now call results and plot AUC curve: cross_validation &gt; cross_validation class : ModelEvaluation n presences : 14120 n absences : 27609 AUC : 0.9074081 cor : 0.7003824 max TPR+TNR at : 0.4054474 plot(cross_validation, &#39;ROC&#39;, cex=1.2) Interpretation: On the receiver operator curve, the 1:1 line give an AUC of 0.5. From our curve and the AUC, it is clear that our model appears to do substantially better than random guessing (high AUC value = 0.907 [90.7%]). The optimal probability threshold at which our model maximizes the True Positive Rate and the True Negative Rate is 0.4054474 (40.55%). Hence, we will use predicted probability &gt; 0.4054 to delineate areas of suitability (or trigger points) for wildfires. 6.3.3 Mapping the predicted probability and suitability To map the predicted probabilities use the predict() function: prob_wildfire &lt;- predict(model_training, envCovariates) Generate a predicted probability map from above prob_wildfire object: # generate a publication-worthy figure # map of probability tm_shape(prob_wildfire) + tm_raster(title = &quot;Predicted probability&quot;, palette = &#39;-RdYlBu&#39;, style =&#39;cont&#39;, breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1.0))+ tm_shape(california_county) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(main.title = &quot;Predicted Probability of Wild Fire [%]&quot;, main.title.position = c(0.2, 0.7), title.size=3, legend.text.size = 1.1, legend.position = c(0.65, 0.55), legend.height= -0.3, legend.title.size = 1.1, frame=&#39;white&#39;)+ tm_scale_bar(position=c(0.02, 0.02), text.size = 1, breaks = c(0, 100, 200, 300))+ tm_compass(north = 0,type = &#39;arrow&#39;, position = c(&#39;right&#39;, &#39;top&#39;), text.size = 0.9) Extract the optimal threshold value from cross validation object cross_validation using the threshold() function and use it to reclassify the raster object i.e., prob_wildfire to a binary raster. Recall, the value was 0.4054474. A probability estimate less than 0.4054474 is classed as 0 and anything above as 1. The predicted probability &gt; 0.4054 are the areas in California suitable (or expected trigger points) for wildfires. # calculate thresholds of models threshold_value &lt;- threshold(cross_validation, &quot;spec_sens&quot;) # report value threshold_value Reclassifying raster object prob_wildfire with threshold value: # prepare threshold total map create_classes_vector &lt;- c(0, threshold_value, 0, threshold_value, 1, 1) create_clasess_matrix &lt;- matrix(create_classes_vector, ncol = 3, byrow = TRUE) create_clasess_matrix &gt; create_clasess_matrix [,1] [,2] [,3] [1,] 0.0000000 0.4054474 0 [2,] 0.4054474 1.0000000 1 # create new reclassify raster based on prob_wildfires suitability_wildfires &lt;- reclassify(prob_wildfire, create_clasess_matrix) Generate final output which shows regions as trigger points: tm_shape(suitability_wildfires) + tm_raster(style = &quot;cat&quot;, title = &quot;Threshold&quot;, palette= c(&quot;lightgrey&quot;, &quot;red&quot;), labels = c(&quot;Safe&quot;, &quot;Trigger Points&quot;)) + tm_shape(california_county) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_layout(frame = FALSE, legend.outside = TRUE) 6.3.4 Supplementary code for 4-fold analysis Click here to see code: # split plot panel into 4 segments for 4 AUC plots par(mfrow=c(2,2)) # create a list() object to dump results inside `eMAX` eMAX&lt;-list() # use california_fires_env # use background_points_env folds &lt;- 4 kfold_pres &lt;- kfold(california_fires_env, folds) kfold_back &lt;- kfold(background_points_env, folds) set.seed(20000430) # adapting loop code from https://rpubs.com/mlibxmda/GEOG70922_Week5 # takes a long time to run 4-fold for (i in 1:folds) { train &lt;- california_fires_env[kfold_pres!= i,] test &lt;- california_fires_env[kfold_pres == i,] backTrain&lt;-background_points_env[kfold_back!=i,] backTest&lt;-background_points_env[kfold_back==i,] dataTrain&lt;-rbind(train,backTrain) dataTest&lt;-rbind(test,backTest) maxnet_eval &lt;- maxent(x=dataTrain[,c(1:6)], p=dataTrain[,7], args=c(&quot;responsecurves&quot;)) eMAX[[i]] &lt;- evaluate(p=dataTest[dataTest$fire==1,],a=dataTest[dataTest$fire==0,], maxnet_eval) plot(eMAX[[i]],&#39;ROC&#39;) } aucMAX &lt;- sapply( eMAX, function(x){slot(x, &#39;auc&#39;)} ) # report 4 of the AUC aucMAX # find the mean of AUC (and it must be &gt; 0.50) mean(aucMAX) #Get maxTPR+TNR for the maxnet model Opt_MAX&lt;-sapply( eMAX, function(x){ x@t[which.max(x@TPR + x@TNR)] } ) Opt_MAX Mean_OptMAX&lt;-mean(Opt_MAX) Mean_OptMAX # use Mean_OptMAX as threshold for mapping suitability #Note: that final results is AUC: 0.9059569; threshold: 0.4338418 6.4 Attributions This week’s practical uses content and inspiration from: Taylor, L. 2022. The social side of fire: assessing the inclusion of human social factors in fire prediction models (submitted as a dissertation [for degree in MSc Social &amp; Geographic Data Science] at UCL). Source 6.5 References (see reading list) Book: [R Programming] Dorman, M. (2014) Learning R for Geospatial Analysis; Chapter 3: Working with Rasters Click link (Note: Downloadable) Book: [Theory] Stockwell, D. (2019) Niche Modeling: Predictions from Statistical Distributions; Chapter 4: Topology; CRC Press; pages: 45-63. Online: [Tutorials] Hijmans, R.J., &amp; Elith, J. (2021) Species distribution modelling Click link Online: [Tutorials] Kerkhoff, D. (2016) Ecological Responses to Climate Change: Species Distribution Modelling using Maxent Click link Online: [Tutorials] Dennis, M. (2020) Practical 4: Species Distribution Modelling I Click link Paper: [Application] Escobar, L.E., (2020). Ecological Niche Modeling: An Introduction for Veterinarians and Epidemiologists, Frontiers in Veterinary Science Click link Paper: [Application] Banks, W.E., (2017). The application of ecological niche modeling methods to archaeological data in order to examine culture-environment relationships and cultural trajectories; Quarternaire Click link Paper: [Application] Liao, Y., Lei, Y., Ren, Z., Chen, H., &amp; Li., D., (2017). Predicting the potential risk area of illegal vaccine trade in China; Scientific Reports, Issue 7, 3883. Click link 6.6 Data Sources All shape files [Source: California Open Data Portal] Click Here Global Wildfires detection points [Source: Fire Information Resource Management System] Click Here Environmental data for temperature &amp; precipitation [Source: WorldClim] Click Here Socioeconomic vulnerability index (requires user login) [Source: Socioeconomic Data and Applications Center (SEDAC)] Click Here Digital Elevation Model [Source: SRTM 90m DEM Digital Elevation Database] Click Here Evapotranspiration (aridity) 1.0km [Source: NASA MODIS MOD16A2] Click Here Normalised Differenced Vegetation Index (NDVI) 250m [Source: NASA MODIS MOD13Q1] Click Here 6.7 Practical homework Suitability mapping of the Aedes mosquito and infestation in Brazil Many regions in Brazil were hit hard by the Zika virus infection outbreak in 2015. Zika infection is caused by the arboviruses transmitted by the Aedes mosquitoes which are abundant in Brazil. It is a known fact that increased abundance of the Aedes mosquito is typically associated with standing (or stagnant) water which serves as a reservoir or hotspot for breeding. Apart from the presence of standing (or stagnated) water in human dwellings, it is important to consider other intermediate factors that drive the mosquitoes to increase in population size. These factors are the following: Temperature Precipitation Population Density NDVI Land surface elevation Natural lighting Urban-rural classification The above listed variables are gridded datasets which can be downloaded by clicking [HERE]. Create a map which should the following: 1.) The predicted probability of infestation of the Aedes mosquito in Brazil; and 2.) the suitability map based on the max TPR + TNR threshold to illustrate where the Aedes mosquito will thrive in Brazil. All identified points for mosquito breeding including background points can downloaded from [HERE]. The boundaries for Brazil can be downloaded from [HERE]. The expected output should look like: Notes: For the predicted probability map (A), reclassify the predictions to the following categories - 0-0.2, 0.2-0.4, 0.4-0.6, 0.6-0.8 and 0.8-1.0. For the second suitability map (B), reclassify the probabilities based on the max TPR + TNR threshold i.e., below it as 0 and labelled as ‘None infested areas’ and above as 1 labelled as ‘Infested areas’. This week’s homework practical was based on the original research paper: Musah et al (2023). Coalescing disparate data sources for the geospatial prediction of mosquito abundance, using Brazil as a motivating case study. Frontiers in Tropical Diseases. Volume 4. DOI: https://doi.org/10.3389/fitd.2023.1039735 "],["geostatistical-modelling.html", "7 Geostatistical Modelling 7.1 Introduction 7.2 Semivariogram analysis 7.3 Kriging modelling (null) 7.4 Kriging modelling (non-null) 7.5 References (see reading list) 7.6 Data Sources 7.7 Practical homework", " 7 Geostatistical Modelling 7.1 Introduction 7.1.1 Lecture video (Length: 01:06:17) [Watch on YouTube] 7.1.2 Computer practical video (Length: 01:59:49) [Watch on YouTube] Today, we will learn how to perform semivariogram analysis which can be used to create continuous predictive maps based on spatial interpolation technique called Kriging. In this session, we will investigate spatial variation in outcomes that are, in theory, spatially continuous; for example, the concentrations of ambient air pollutants such as Sulphur dioxide (\\(SO_{2}\\)) (a toxic gas emitted from sulphur rich fuels (i.e., coal, oil or diesel) when burnt) which can be present anywhere but in practice are only measured at specified point locations, such as air quality monitoring stations. We will assess for the presence of spatial autocorrelation using semivariogram which is distance-based, which describes the correlation of a variable with itself through geographic space. Here, a Positive Autocorrelation exists when measurements close to one another are alike than they would be due to chance or through random sampling. The presence of autocorrelation for spatially continuous phenomena can be established by using semivariograms. Estimates from a semivariogram can be are used from model construction for spatial interpolation across a study area, whereby values at unsampled locations are predicted from neighbouring sites. A popular form of interpolation, which is based on the spatial attribute’s outcome variable, is known as Kriging (a technique named after a South African engineer, Danie G. Krige (1919 to 2013)). In you own time, see who Danie G. Krige is in this lecture [watch video] 7.1.3 Learning objectives The US Environmental Agency have positioned air quality monitors for surveillance of over 100 different types of pollutants that exist as toxic gases, particulates and heavy metals. For Sulphur Dioxide (\\(SO_{2}\\)), there are 458 active air monitors that takes hourly readings for concentrations of \\(SO_{2}\\) (in parts per billion (pbb)). An annual estimate for \\(SO_{2}\\) was calculated for each station at its location. Car usage, urbanisation and social economic deprivation, alongside of other anthropogenic activities such as coal burning, across the USA increases the risk of elevated pollution of \\(SO_{2}\\). Using geostatistical methods and taking into account of car usage, urbanisation and levels of deprivation - what areas in USA have higher concentrations of \\(SO_{2}\\) exceeding the annual average of 40 ppb which is a national safety limit for cause of concern? Let’s use Kriging to find out! 7.1.4 Datasets &amp; setting up the work directory Before you begin do make sure to download all data by clicking here. Create a folder on called “Week 6” within your “GEOG0114” folder stored in the desktop of your personal computer. Make sure to extract all data from the zip folder and store it into “Week 6” folder. Open a new R script and set the work directory to Week 6’s folder. For Windows, the work directory will be: setwd(&quot;C:/Users/AccountName/Desktop/GEOG0114/Week 6&quot;) For MAC, the work directory will be: setwd(&quot;/Users/AccountName/Desktop/GEOG0114/Week 6&quot;) 7.1.5 Loading and installing packages We will need to load the following packages: sf: Simple Features tmap: Thematic Mapping raster: Raster/gridded data analysis and manipulation sp: Package for providing classes for spatial data (points, lines, polygons and grids) # Load packages using library() function library(&quot;sf&quot;) library(&quot;tmap&quot;) library(&quot;raster&quot;) library(&quot;sp&quot;) The above packages sf, tmap, raster &amp; sp should have been installed in the previous session(s). We will need to install the following package: gstat: provides functions for univariable and multivariable geostatistical analysis. geoR: provides additional functions for geostatistical and variogram analysis. # Install the packages: gstat using the install.package() install.packages(&quot;gstat&quot;) install.packages(&quot;geoR&quot;) # Load the packages with library() library(&quot;gstat&quot;) library(&quot;geoR&quot;) 7.1.6 Loading datasets Let us first import the quantitative data i.e., US 2019 SO2 Emissions data.csv into R/RStudio. # Use read.csv() to import datafile &lt;- read.csv(file = &quot;US 2019 SO2 Emissions data.csv&quot;, header = TRUE, sep = &quot;,&quot;) NOTE: The description of the column names are as follows: Column Name Description CountyRef The County &amp; State for where the air quality monitors are located in US Longitude Longitude (in decimal degrees) Latitude Latitude (in decimal degrees) Mean_SO2 Annual Mean (ppb) concentrations of Ambient sulphur dioxide (\\(SO_{2}\\)) in 2019 Shape file: US National border named US Nation Border.shp Shape file: US State border named US State Borders.shp Raster: US Car Usage (5000m resolution) named US Prevalence of Car Usage 5km.tif Raster: US Urbanisation Index (5000m resolution) named US Urbanisation Index 5km.tif Raster: US Socioeconomic Deprivation (5000m resolution) named US Socioeconomic Deprivation 5km.tif # Use read_sf() function to load shape file US_Nation_Border_shp &lt;- st_read(&quot;US Nation Border.shp&quot;) US_State_Border_shp &lt;- st_read(&quot;US State Borders.shp&quot;) 7.1.7 Data preparation There are a couple of things we need to do before proceeding with the analysis: The datafile is a data frame object in RStudio’s memory, and not a spatial object. We need to coerce into a spatial sf object The shapefiles for US Nation Border.shp &amp; US State Borders.shp are in a different CRS called Spherical Mercator 3857 which measures distance in meters and not in decimal degrees. We need to transform the longitude and latitude of our stations which are in decimal degrees to the CRS of Spherical Mercator 3857 # Coerce the spreadsheet into a sf object # First tell R that it’s coordinates are currently in decimal degrees (i.e., WGS84 &#39;crs = 4326&#39;) before the transformation datafile_sf &lt;- st_as_sf(datafile, coords = c(&quot;Longitude&quot;, &quot;Latitude&quot;), crs = 4326) # Now apply the transformation from WGS84 to Mercator i.e., = 3857 datafile_sf_prj &lt;- st_transform(datafile_sf, 3857) # Inspect the details st_crs(datafile_sf_prj) The code chunk below generates an empty map with the tmap functions. It shows just the border of USA and the point locations for the air quality monitoring stations superimposed. tm_shape(US_Nation_Border_shp) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_shape(datafile_sf_prj) + tm_dots() + tm_scale_bar(position = c(&quot;left&quot;,&quot;bottom&quot;)) + tm_compass(position = c(&quot;right&quot;, &quot;bottom&quot;)) 7.2 Semivariogram analysis Semivariograms describe how data are related with distance by plotting the semivariance against the separation distance, known as the experimental or empirical semivariogram. The semivariance is defined as half the average squared difference between points separated by some distance h. As the separation distance h between samples increase, we would expect the semivariance to also increase (again, because near samples are more similar than distant samples). In the generic semivariogram shown above, there are three important parameters: Sill: The maximum semivariance value observed, and it indicates the threshold for values beyond (i.e., flatline) which there is no spatial autocorrelation. NOTE: the Partial Sill is a value calculated by taking the difference between the Sill and Nugget (i.e., Partial Sill = Sill - Nugget) Range: The maximum separation distance h at which we will expect to find evidence of spatial autocorrelation. A separation distance beyond the range samples are no longer correlated. Nugget: This describes the variance of the measurement error combined with spatially uncorrelated variations at distances shorter than the sample spacing, namely noise in the data. The larger the nugget relative to the sill, the less spatial dependence there is in the data and less useful Kriging will be. IMPORTANT NOTES: Two important assumptions of a basic semivariogram are that the spatial process under investigation are: i.) stationary, i.e., the spatial autocorrelation between the measurements of same variables in a given area is the same for all locations; and ii.) isotropic, spatial autocorrelation is the same in every direction. If the autocorrelation differs by direction, it is termed as anisotropic. To be used in Kriging, a semivariogram plot (akin to the above image) must be generated to estimate the 3 parameters (i.e., sill, nugget &amp; range) from the points termed experimental or empirical semivariogram. These are used as initial values to fit a modelled or theoretical semivariogram which can be in one of three major forms: Gaussian Model (Left) Spherical Model (Center) Exponential Model (Right) Once the modelled semivariogram has been defined, it can be used in Kriging. 7.2.1 Plotting the Empirical Semivariogram Use the function variogram() to create the object for plotting the empirical variogram # coerce datafile_sf_prj to be a &#39;sp&#39; spatial dataframe object as it&#39;s # ---variogram does not use &#39;sf&#39; objects # ignore warning message datafile_sp_prj &lt;- as(datafile_sf_prj, &quot;Spatial&quot;) # use variogram() function to compute the semivariance with a null model Mean_SO2 as outcome SO2_emp.variogram &lt;- variogram(Mean_SO2~1, datafile_sp_prj) # Compute the object to reveal a table SO2_emp.variogram IMPORTANT NOTES: np in the output is the number of paired considered within the separation distance dist; gamma is the averaged semivariance for the number of paired points within the separation distance dist. Let us plot these values to see the empirical semivariogram plot(SO2_emp.variogram) From the output (i.e., plot and table), we should note the approximate values for the partial sill, nugget and range. The nugget is roughly 17 (i.e. base on starting gamma value from the table). The range is roughly 1180000 meters (i.e. base on peak value for gamma and it’s corresponding dist). The partial sill is 65. This is derived from the peak value for gamma subtracted by the nugget (82 - 17 = 65). These initial values give us an idea of what to expect when we proceed to fit a theoretical semivariogram using the fit.variogram(). It will help us to generate the fitted models. 7.2.2 Plotting the Theoretical Semivariogram We are going to fit a model to the empirical semivariogram in order to determine the appropriate function for Kriging (i.e., spherical (Sph), exponential (Exp) or gaussian (Gau)). We will start fitting the various models: # Fit exponential exp_SO2_emp.variogram &lt;- fit.variogram(SO2_emp.variogram, model = vgm(65, &quot;Exp&quot;, 1180000, 17)) exp_SO2_emp.variogram plot(SO2_emp.variogram, exp_SO2_emp.variogram, main = &quot;Exponential model (Nug: 3.6, PSill: 55.9, Range: 296255m)&quot;) # Fit Spherical sph_SO2_emp.variogram &lt;- fit.variogram(SO2_emp.variogram, model = vgm(65, &quot;Sph&quot;, 1180000, 17)) sph_SO2_emp.variogram plot(SO2_emp.variogram, sph_SO2_emp.variogram, main = &quot;Spherical model (Nug: 10.5, PSill: 49.6, Range: 857452m)&quot;) # Fit gaussian gau_SO2_emp.variogram &lt;- fit.variogram(SO2_emp.variogram, model = vgm(65, &quot;Gau&quot;, 1180000, 17)) gau_SO2_emp.variogram plot(SO2_emp.variogram, gau_SO2_emp.variogram, main = &quot;Gaussian model (Nug: 12.8, PSill: 39.1, Range: 244807m)&quot;) By eyeballing the images - it difficult to discern whether the exponential or spherical model provides a better fit to the empirical semivariogram. We can use the fit.variogram() function to determine which is the best model amongst them. # select the best model best_SO2_emp.variogram &lt;- fit.variogram(SO2_emp.variogram, model = vgm(c(&quot;Exp&quot;, &quot;Gau&quot;, &quot;Sph&quot;))) best_SO2_emp.variogram From the output (see column which says model and row 2 it highlights \"Exp\"), it shows that the exponential model is the best fit with a nugget = 3.6, Partial Sill = 55.9 and Range = 296255m. We therefore select the exponential model in our Kriging to make the spatial prediction for \\(SO_{2}\\). Lets proceed to Krige. IMPORTANT NOTES: The interpretation is as follows: the nugget in the exponential model is smaller than the other proposed models. It is small which is also an indication of evidence of larger spatial dependence in the concentrations for \\(SO_{2}\\) across sampling sites in USA; A separation distance with values beyond 296255m (where it curve starts to plateau) and beyond the semivariance’s threshold where it flat lines (sill of 59.5 (i.e., 55.9 + 3.6)) - there should expect that the spatial autocorrelation in the observed levels of \\(SO_{2}\\) are not present anymore. 7.3 Kriging modelling (null) 7.3.1 Building a blank raster template Let us create a template raster for interpolation. The extent of the raster template should based on the points. We are going to make the resolution of grid be at 5000m by 5000m (5km by 5km) accordingly. RasterTemplate &lt;- raster(datafile_sp_prj) res(RasterTemplate) &lt;- 5000 Next, declare template as a spatial grid grid.interpolation &lt;- as(RasterTemplate, &#39;SpatialGrid&#39;) 7.3.2 Implementing the spatial interpolation on blank template using Kriging Now, we are going to use the parameters from the exponential theoretical semivariogram model to interpolate the concentrations of ambient SO2 for the entire study region modelKrigingExp &lt;- gstat(formula = Mean_SO2~1, locations = datafile_sp_prj, model = exp_SO2_emp.variogram) The results are stored in modelKrigingExp object. Lets add the results of the interpolation to our grid template using the predict() function # this may take roughly 5mins Kriged_SO2 &lt;- predict(modelKrigingExp, grid.interpolation) The above analysis produces two separate rasters: i.) Predicted \\(SO_{2}\\) and ii.) Variation in \\(SO_{2}\\). Let export the results and make some visualisation using the tmap functions 7.3.3 How to export the results as .tiff format thematic visualisation in tmap Now, save both the prediction and variance a multi-layer raster (a ‘brick’ raster): brickedKriged_SO2_Results &lt;- brick(Kriged_SO2) We can save them individually from the multi-layer raster as follows: # Separate the rasters accordingly exp.prediction &lt;- raster(brickedKriged_SO2_Results, layer = 1) exp.variance &lt;- raster(brickedKriged_SO2_Results, layer = 2) # save the output locally on your computer writeRaster(exp.prediction, &quot;Predicted SO2 levels in USA.tif&quot;, format=&quot;GTiff&quot;, overwrite = TRUE) writeRaster(exp.variance, &quot;Variance SO2 levels in USA.tif&quot;, format=&quot;GTiff&quot;, overwrite = TRUE) 7.3.4 Thematic visualisation of raster data using tmap We will need to perform a couple of steps before visualisation. First, we will need to mask the values of the raster predictions were made outside of US Border’s region. To do this, we use the mask() function: # mask values of raster outside regions of US Border US_Nation_Border_sp_shp &lt;- as(US_Nation_Border_shp, &quot;Spatial&quot;) exp.prediction_masked &lt;- mask(exp.prediction, US_Nation_Border_shp) Next, we are going to make the raster image sit perfectly sit within the plot’s frame using the country’s bounding box or extent. We can extract the bounding box by using st_bbox() function on the US_Nation_Border_shp shape file object, this basically gives us the extent of the region. frameExtent &lt;- st_bbox(US_Nation_Border_shp) frameExtent &gt; frameExtent xmin ymin xmax ymax -13885235 2819925 -7452828 6340334 IMPORTANT NOTES: The above values are essentially the coordinates that form a rectangle, a rectangular area which the USA country is bounded within. We are using this as the full plot region for the raster to prevent parts of the image not showing. Now, let us visualise the predictions: tm_shape(exp.prediction_masked, bbox = frameExtent) + tm_raster(title = &quot;Predicted SO2 ppb&quot;, style = &quot;cont&quot;, palette = &quot;Reds&quot;) + tm_shape(US_State_Border_shp) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_text(&quot;STUSPS&quot;, size = &quot;AREA&quot;) + tm_shape(datafile_sf_prj) + tm_dots() + tm_scale_bar(position = c(&quot;left&quot;,&quot;bottom&quot;)) + tm_compass(position = c(&quot;right&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5, legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) The above shows the predicted concentrations of ambient \\(SO_{2}\\); however, the predicted surface is very smooth and it difficult to see the spatial patterns. One technique, which is sometimes useful, for raster data is to reclassify the pixels to ordered categories i.e., zones instead of pixel-point estimates. We could reclassify the continuous values stored in the grids/pixels into discrete values using the following scheme: 0 = \"&lt; 1.0 ppb\" 1 = \"1.0-4.9 ppb\" 2 = \"5.0-9.9 ppb\" 3 = \"10.0-14.9 ppb\" 4 = \"15.0-19.9 ppb\" 5 = \"20.0-29.9 ppb\" 6 = \"30.0-39.9 ppb\" 7 = \"+40.0 ppb\" You can do this by using the following code: # Create a vector for the reclassification -i.e., 1st row captures values # --- between 0 and below 1 to reclassify a pixel as 0 # While the 2nd row in this vector captures values between 1 and below 5 to # --- reclassify a pixel as 1 and so on and so forth reclassifyRaster &lt;- c(0,1,0, 1,5,1, 5,10,2, 10,15,3, 15,20,4, 20,30,5, 30,40,6, 40,70,7) # Then store the values into a matrix reclassifyRaster_Mat &lt;- matrix(reclassifyRaster, ncol=3, byrow=TRUE) reclassifyRaster_Mat Now, apply the matrix to the raster object to reclassify the pixels accordingly using the reclassify() function: exp.prediction_masked_rec &lt;- reclassify(exp.prediction_masked, reclassifyRaster_Mat) Now, lets visualise the predictionszones: tm_shape(exp.prediction_masked_rec, bbox = frameExtent) + tm_raster(title = &quot;Predicted SO2 ppb&quot;, style = &quot;cat&quot;, palette = &quot;Reds&quot;, labels = c(&quot;&lt;1.0 ppbs&quot;,&quot;1.0-4.9 ppb&quot;,&quot;5.0-9.9 ppb&quot;, &quot;10.0-14.9 ppb&quot; , &quot;15.0-19.9 ppb&quot;, &quot;20.0-29.9 ppb&quot;, &quot;30.0-39.9 ppb&quot;,&quot;+40.0ppb&quot;)) + tm_shape(US_State_Border_shp) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_text(&quot;STUSPS&quot;, size = &quot;AREA&quot;) + tm_shape(datafile_sf_prj) + tm_dots() + tm_scale_bar(position = c(&quot;left&quot;,&quot;bottom&quot;)) + tm_compass(position = c(&quot;right&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5, legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) You can visualise the variance: # mask values of raster outside regions of US Border exp.variance_masked &lt;- mask(exp.variance, US_Nation_Border_sp_shp) tm_shape(exp.variance_masked, bbox = frameExtent) + tm_raster(title = &quot;Variance SO2 ppb&quot;, style = &quot;cont&quot;, palette = &quot;Oranges&quot;) + tm_shape(US_State_Border_shp) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_text(&quot;STUSPS&quot;, size = &quot;AREA&quot;) + tm_shape(datafile_sf_prj) + tm_dots() + tm_scale_bar(position = c(&quot;left&quot;,&quot;bottom&quot;)) + tm_compass(position = c(&quot;right&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5, legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) Again, it will be better to reclassify the raster for the variance to see where the model predicts the SO\\(_2\\) with lower and high errors. We can use the reclassify() accordingly. Note that the lowest and highest estimated variance is 4.435438 and 57.59579, respectively. Let us reclassify the variance raster using the following scheme: 0 = \"&lt; 5.0 ppb\" 1 = \"5.0-9.9 ppb\" 2 = \"10.0-19.9 ppb\" 3 = \"20.0-29.9 ppb\" 4 = \"30.0-39.9 ppb\" 5 = \"40.0-49.9 ppb\" 6 = \"+50.0 ppb\" Here is the code: reclassifyRaster_var &lt;- c(0,5,0, 5,10,1, 10,20,2, 20,30,3, 30,40,4, 40,50,5, 50,60,6) reclassifyRaster_Mat_var &lt;- matrix(reclassifyRaster_var, ncol=3, byrow=TRUE) reclassifyRaster_Mat_var exp.variance_masked_rec &lt;- reclassify(exp.variance_masked, reclassifyRaster_Mat_var) tm_shape(exp.variance_masked_rec, bbox = frameExtent) + tm_raster(title = &quot;Variance SO2 ppb&quot;, style = &quot;cat&quot;, palette = &quot;Oranges&quot;, labels = c(&quot;&lt;5.0 ppbs&quot;,&quot;5.0-9.9 ppb&quot;,&quot;10.0-19.9 ppb&quot;, &quot;20.0-29.9 ppb&quot; , &quot;30.0-39.9 ppb&quot;, &quot;40.0-49.9 ppb&quot;,&quot;+50.0ppb&quot;)) + tm_shape(US_State_Border_shp) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_text(&quot;STUSPS&quot;, size = &quot;AREA&quot;) + tm_shape(datafile_sf_prj) + tm_dots() + tm_scale_bar(position = c(&quot;left&quot;,&quot;bottom&quot;)) + tm_compass(position = c(&quot;right&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5, legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) IMPORTANT NOTES: The above example was a null model. We can include risk factors as adjustments for the prediction. The below code shows you how to incorporate other variables in the analysis. We will use the other raster data sets for urbanisation, deprivation and car usage as adjustments in the Kriging model. 7.4 Kriging modelling (non-null) The code is a repeat of the above but with regression covariate adjustment. library(&quot;sf&quot;) library(&quot;sp&quot;) library(&quot;raster&quot;) library(&quot;tmap&quot;) library(&quot;gstat&quot;) library(&quot;geoR&quot;) datafile &lt;- read.csv(file = &quot;US 2019 SO2 Emissions data.csv&quot;, header=TRUE, sep=&quot;,&quot;) US_Nation_Border_shp &lt;- st_read(&quot;US Nation Border.shp&quot;) US_State_Borders_shp &lt;- st_read(&quot;US State Borders.shp&quot;) # Coerce the spreadsheet into a sf object # First tell R that it’s coordinates are currently in decimal degrees (i.e., WGS84 &#39;crs = 4326&#39;) before the transformation datafile_sf &lt;- st_as_sf(datafile, coords = c(&quot;Longitude&quot;, &quot;Latitude&quot;), crs = 4326) # Now apply the transformation from WGS84 to Mercator i.e., = 3857 datafile_sf_prj &lt;- st_transform(datafile_sf, 3857) # Inspect the details st_crs(datafile_sf_prj) # Step 1: Load rasters. These are the covariates we will use in the gstat() function for the kriging regression US_urbanisation &lt;- raster(&quot;US Urbanisation Index 5km.tif&quot;) US_SVI &lt;- raster(&quot;US Socioeconomic Deprivation 5km.tif&quot;) US_CarUsage &lt;- raster(&quot;US Prevalence of Car Usage 5km.tif&quot;) # ignore that stupid warning message as its related to outdated &#39;rgdal &amp; rgeos&#39;. All raster are in the CRS Mercator 3857 # Step 2: Stack the three rasters together by using the stack() function predictors &lt;- stack(US_urbanisation, US_SVI, US_CarUsage) # Step 3: from the stacked data extract the raster values on the points of pollution stations using the extract() function predictors.values &lt;- extract(predictors, datafile_sp_prj) # Step 4: Stitch the extraction to the spatial point data frame using the cbind() &quot;column bind&quot; function datafile_sp_prj@data &lt;- cbind(datafile_sp_prj@data, predictors.values) # You can view the dataframe to see the raster values. What has happened is we extracted the overlapping raster pixels on # those pollution stations and assuming those are the levels of urbanisation, deprivation and car usage at those points for # which the SO2 levels are observed. View(datafile_sp_prj@data) # Step 5: Linear Regression model to determine which variables are worth to be included in the Kriging model. If the turn out # to be statistical significant (i.e., p &lt; 0.05). Then include to include in the kriging. lm.model &lt;- lm(Mean_SO2 ~ US_Urbanisation_Index_5km + US_Socioeconomic_Deprivation_5km + US_Prevalence_of_Car_Usage_5km, data = datafile_sp_prj@data) summary(lm.model) # all variables are statistically significant. According to this model urbanisation and car usage marginally decreases SO2 levels, # while areas of higher deprivation yields higher levels of SO2. Include all variables to the Kriging model since they are # significant. # Step 6: use variogram() function to compute the semivariance with variable in the model SO2_adj_emp.variogram &lt;- variogram(Mean_SO2 ~ US_Urbanisation_Index_5km + US_Socioeconomic_Deprivation_5km + US_Prevalence_of_Car_Usage_5km, datafile_sp_prj) SO2_adj_emp.variogram plot(SO2_adj_emp.variogram) # Step 7: Determine best model best_SO2_adj_emp.variogram &lt;- fit.variogram(SO2_adj_emp.variogram, model = vgm(c(&quot;Exp&quot;, &quot;Gau&quot;, &quot;Sph&quot;))) best_SO2_adj_emp.variogram plot(SO2_adj_emp.variogram, best_SO2_adj_emp.variogram, main = &quot;Best Model: Exponential (Nug: 5.63, PSill: 49.4, Range: 293891.2m)&quot;) # HERE ARE THE CORRECTIONS # Step 8: Here is where we need to insert the raster values and not the points. In the previous iteration, I mistakenly used the # point verison of the car usage data and adapted the code without verifying it to work. I sincerely apologise for this oversight! modelKrigingExp_adj &lt;- gstat(formula = Mean_SO2~US_Urbanisation_Index_5km + US_Socioeconomic_Deprivation_5km + US_Prevalence_of_Car_Usage_5km, locations = datafile_sp_prj, model = best_SO2_adj_emp.variogram) # Take the stacked rasters for car usage, urbanisation and socioeconomic deprivation and convert it to a grid template # Here, we need their values stored inside that grid template, to which we will apply the kriging model to make the prediction # while at the same time make adjustments for their value. # we created the stacked into the &#39;predictors&#39; object predictors.grid &lt;- as(predictors, &quot;SpatialGridDataFrame&quot;) # Last time it was just &quot;SpatialGrid&quot; because it was empty. This grid has values and thus not empty # so we call it &quot;SpatialGridDataFrame&quot; # Step 9: We can now do the predictions over the SpatialGridDataFrame Kriged_SO2_adj &lt;- predict(modelKrigingExp_adj, predictors.grid) # Brick the layer in order to separate the estimated prediction and variance accordingly brickedKriged_SO2_Results_adj &lt;- brick(Kriged_SO2_adj) exp.prediction_adj &lt;- raster(brickedKriged_SO2_Results_adj, layer = 1) exp.variance_adj &lt;- raster(brickedKriged_SO2_Results_adj, layer = 2) # Step 10: Masking the prediction and reclassifying the layer # You can mask the prediction with the outline of USA US_Nation_Border_sp_shp &lt;- as(US_Nation_Border_shp, &quot;Spatial&quot;) exp.prediction_adj_masked &lt;- mask(exp.prediction_adj, US_Nation_Border_sp_shp) # Run this to see minimum and maximum value. exp.prediction_adj_masked # You can see there are negative value as some of the prediction for SO2. # Lets reclassify these as an invalid prediction with value -1 reclassifyRaster &lt;- c(-2,0,-1, 0,1,0, 1,5,1, 5,10,2, 10,15,3, 15,20,4, 20,30,5, 30,40,6, 40,70,7) reclassifyRaster_Mat &lt;- matrix(reclassifyRaster, ncol=3, byrow=TRUE) reclassifyRaster_Mat # Apply the categories to masked layer in order to reclassify the predictions that were adjusted those 3 variables exp.prediction_adj_masked_rec &lt;- reclassify(exp.prediction_adj_masked, reclassifyRaster_Mat) # Create the labels for the &#39;reclassifyRaster_Mat&quot; object SO2LevelsCategories &lt;- c(&quot;Invalid&quot;,&quot;&lt;1.0 ppbs&quot;,&quot;1.0-4.9 ppb&quot;,&quot;5.0-9.9 ppb&quot;, &quot;10.0-14.9 ppb&quot; , &quot;15.0-19.9 ppb&quot;, &quot;20.0-29.9 ppb&quot;, &quot;30.0-39.9 ppb&quot;,&quot;+40.0ppb&quot;) # Finally, we going to force the colour schemes we want. # We want the &quot;Invalid&quot; category to have a grey colour; and the rest for lowest category # ie., &quot;&lt;1.0ppbs&quot; to &quot;+40.0ppb&quot; to be increase red intensities&quot; # Force the colorbrewer schemes grey = #636363 # Force the reds (from light red down to solid-dark-red) = #fee5d9, #fcbba1, #fc9272, #fb6a4a, #ef3b2c, #cb181d, #99000d # Create the colour scheme for the above &#39;SO2LevelsCategories&#39; HackedColourPalette &lt;- c(&quot;#636363&quot;, &quot;#fee5d9&quot;, &quot;#fcbba1&quot;, &quot;#fc9272&quot;, &quot;#fb6a4a&quot;, &quot;#ef3b2c&quot;, &quot;#cb181d&quot;, &quot;#99000d&quot;) # Step 11: Visual the adjusted prediction from Universal Kriging Regression tm_shape(US_Nation_Border_shp) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + # add base map of borders here tm_shape(exp.prediction_adj_masked_rec) + tm_raster(title = &quot;Predicted adjusted SO2 ppb&quot;, style = &quot;cat&quot;, palette = HackedColourPalette, labels = SO2LevelsCategories) + tm_shape(US_State_Borders_shp) + tm_polygons(alpha = 0, border.col = &quot;black&quot;) + tm_text(&quot;STUSPS&quot;, size = &quot;AREA&quot;) + tm_shape(datafile_sf_prj) + tm_dots() + tm_scale_bar(position = c(&quot;left&quot;,&quot;bottom&quot;)) + tm_compass(position = c(&quot;right&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) 7.5 References (see reading list) Technical Document: [R Programming] Gurpreet Singh and Biju Soman, (2020), Spatial Interpolation using Kriging in R. Download here Technical Document: [R Programming] Fernando Antonanzas-Torres, (2014), Geostatistics examples in R: Ordinary Kriging, Universal Kriging and Inverse Distance Weighted. Download here Technical Document: [R Programming] Adela Volfova and Martin Smejkal, (2012), Geostatistical Methods in R. Download here Book: [R Programming] Roger S. Bivand, Edzer J. Pebesma and Virgilio Gomez-Rubio, (2008), Applied Spatial Data Analysis with R, Chapter 8: Interpolation and Geostatistics, pages 191 to 235. Book: [R Programming] Michael Dorman, (2014), Learning R for Geospatial Analysis, Chapter 8: Spatial Interpolation of Point Data, pages 241 to 279. Book: [Theory] Christopher D. Lloyd, (2010), Spatial Data Analysis: An Introduction for GIS Users, Chapter 9: Spatial Interpolation (Section 9.7. Ordinary Kriging), pages 140 to 150. 7.6 Data Sources The pollution data was obtained from the United States Environmental Protection Agency (EPA) Click Here Spatial data concerning car usage in the US was sourced from the ACS Vehicle Availability Variables project Click Here. You would need to have Online ArcGIS account to access the resources. US raster data for Social Vulnerability Index 2018 and Urbanization Index (2015) were sourced from the NASA Socioeconomic Data &amp; Applications Center (SEDAC) Click Here. NOTE: Registration required for free access to raster records. The Global Atlas for Helminths Infections (GAHI) Click Here Expanded Special Project for Elimination of Neglected Tropical Diseases (ESPEN-NTD) Click Here 7.7 Practical homework Case study: Village survey of hookworm infection in Uganda and Tanzania We will use data on the prevalence of hookworm collected from 393 villages in Uganda and Tanzania. The dataset includes coordinates for each village, which have been geo-referenced to a specific longitude and latitude, as well as the boundaries of the study area for the two countries: Point data: Soil_Transmitted_Helminth_Data.csv Shapefile of region: Study_Area_UG_TZ.shp Shapefile of region with districts: Study_Area_UG_TZ_Districts.shp These data can be downloaded [HERE] As shown in the practical, this analysis involves going through five stages: Data preparation and checking the distribution of points within the study area Variogram analysis for generating an empirical variogram Variogram analysis for generating a theoretical variogram to determine the appropriate model Geostatistical prediction (Ordinary Kriging [null model]) Thematic mapping and visualisation. Use Kriging to generate a predicted prevalence map of Hookworm infection for the entire study area in Uganda and Tanzania. The World Health Organisation has a classification for grading disease burden of this type of illness in the Global South: Areas with prevalence of &lt; 1% are deemed as “Negligible” Areas with a prevalence from 1% to 10% are deemed “Low risk” Areas with a prevalence from 10% to 20% are deemed “Moderate risk” Areas with a prevalence from 20% to 50% are deemed “High risk” Areas with a prevalence from 50% and more are zones where risks are “Excessive” Produce an output that reflect the WHO’s classification for this disease. "],["spatial-models-part-1.html", "8 Spatial Models: Part 1 8.1 Introduction 8.2 Diagnostics of residuals 8.3 Spatial Regression Models 8.4 References (see reading list) 8.5 Data Sources 8.6 Useful videos", " 8 Spatial Models: Part 1 8.1 Introduction This session builds on the techniques taught in week 3’s tutorials focused on spatial dependence &amp; spatial autocorrelation. Today, you will learn how to build spatially-based regression models for dealing with spatial autocorrelation whenever you want to determine relationship between an outcome and other independent variables. These are known as Spatial Lag or Spatial Error regression models. 8.1.1 Learning objective In this exercise we will be using London’s Lower Super Output Area (LSOA) data from 2015 pertained to house prices (as a dependent variable), and assessing it’s relationship with public transport accessibility (PTA), average income and socioeconomic deprivation (IMD) as independent variables while accounting for spatial autocorrelation. We will implement three models: Multivariable linear regression Spatial lag regression Spatial error regression 8.1.2 Datasets &amp; setting up the work directory Before you begin do make sure to download all data by clicking here. Create a folder on called “Week 9” within your “GEOG0114” folder stored in the desktop of your personal computer. Make sure to extract all data from the zip folder and store it into “Week 9” folder. Open a new R script and set the work directory to Week 9’s folder. For Windows, the work directory will be: setwd(&quot;C:/Users/AccountName/Desktop/GEOG0114/Week 9&quot;) For MAC, the work directory will be: setwd(&quot;/Users/AccountName/Desktop/GEOG0114/Week 9&quot;) 8.1.3 Loading and installing packages We will need to load the following packages: sf: Simple Features tmap: Thematic Mapping spdep: Spatial Dependence (Weighting schemes &amp; Spatial Statistics) sp: Package for providing classes for spatial data (points, lines, polygons and grids) # Load packages using library() function library(&quot;sf&quot;) library(&quot;tmap&quot;) library(&quot;spdep&quot;) library(&quot;sp&quot;) library(&quot;spatialreg&quot;) library(&quot;olsrr&quot;) The above packages sf, tmap, spdep &amp; sp should have been installed in the previous session(s). We will need to install the following packages: spatialreg: provides functions for spatial regression modelling. # Install the packages: spatialreg using the install.package() install.packages(&quot;spatialreg&quot;) # Load the packages with library() library(&quot;spatialreg&quot;) 8.1.4 Loading datasets Let us first import the quantitative data i.e., London LSOA 2015 data.csv into R/RStudio. # Use read.csv() to import datafile &lt;- read.csv(file = &quot;London LSOA 2015 data.csv&quot;, header = TRUE, sep = &quot;,&quot;) NOTE: The description of the column names are as follows: Column Name Description LSOACODE Unique identification code for the geographic area AVEPRICE (Dependent variable) Average house price estimated for the LSOA in 2015 AVEINCOME Estimated average annual income for households within an LSOA in 2015 IMDSCORE Deprivation score for an LSOA in 2015 PTAINDEX Measures levels of access/connectivity to public transport PTACAT PTAINDEX rendered into a categorical variable The above data were sourced from the London DATASTORE. Next, we import the shape files for London (i.e., LSOA- and Borough-level): London LSOA shape file: London LSOA Areas.shp London Borough shape file: London Borough Areas.shp # Use read_sf() function to load shape file LSOAshp &lt;- read_sf(&quot;London LSOA Areas.shp&quot;) BOROUGHshp &lt;- read_sf(&quot;London Borough Areas.shp&quot;) The code chunk below generates an empty map with the tmap functions. It inspects the spatial configuration of London’s LSOA with the Boroughs superimposed. # Generate an empty map to visualise the spatial configuration and hierarchy of LSOA and Boroughs # First add LSOA layer tm_shape(LSOAshp) + tm_polygons() + # Add Borough layer on top of LSOA layer and make it transparent with alpha = 0 tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + # Apply cosmetics by adding compass and scale tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) 8.2 Diagnostics of residuals 8.2.1 Reporting basic summary statistical measures For any statistical &amp; spatial analysis its always useful to conduct some descriptive analysis of your dataset. You can obtain basic summary measures using the summary() function which reports the overall result i.e., minimum, maximum, median, mean, 25th and 75th percentile values. For instance, we can report these estimates for the house price variable: summary(datafile$AVEPRICE) We can see that the mean price across the LSOAs is £528,509 with ranges from £133,997 to £5,751,342. You can also report the standard deviation across all LSOAs using the sd() function. As you can see the result is large and estimated as ±£418,842.5. sd(datafile$AVEPRICE) NOTE: We have compiled some useful functions for reporting basic measures for descriptive analysis of the fly: min(): minimum max(): maximum mean(): mean median(): median sd(): standard deviation 8.2.2 Reporting the spatial distribution of our variables Now lets examine the spatial distribution for the house price. First, the LSOA data is stored in datafile which is just a data frame object. We need to merge this to the spatial object LSOAshp before using the tmap functions. Lets create a new spatial data frame and name it spatialdatafile # Merge datafile to LSOAshp uniquely by using &quot;LSOACODE column spatialdatafile &lt;- merge(LSOAshp, datafile, by.x = &quot;LSOACODE&quot;, by.y = &quot;LSOACODE&quot;) Lets now generate our first map to inspect the distribution of house prices. We can actually store a picture as an image object called plot1 plot1 &lt;- tm_shape(spatialdatafile) + tm_fill(&quot;AVEPRICE&quot;, style = &quot;quantile&quot;, n = 7, palette = &quot;Greens&quot;) + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) # plot the image object plot1 Descriptively, we can observe already an interesting pattern. LSOAs in parts of North, Central and the central West of Inner London tend to have high-priced properties on average exceeding £758,000.00, whereas in parts of Hillingdon, Enfield, Croydon, Bexley, Barking &amp; Dagenham have on average cheaper properties below £273,000.00. We need to take note that the patterns look clustered; however, this descriptive reporting is by no means an evidence-based analysis for assessing clustering or dispersion (i.e., spatial autocorrelation) - a Moran’s I test will be able to diagnosis this problem for house price but when other factors are involved we will need to use the residuals in the Moran’s I test. Let us visualise three other variables which will subsequently be treated as independent variables in a regression to eyeball whether they are correlated with the house prices. Let us plot maps for income, deprivation and PAT (categories); and then stitch them together by invoking the tmap_arrange() function. # create 3 separate maps and store them in plot2, plot3 &amp; plot4 objects # map for income plot2 &lt;- tm_shape(spatialdatafile) + tm_fill(&quot;AVEINCOME&quot;, style = &quot;quantile&quot;, n = 7, palette = &quot;Oranges&quot;) + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) # map for socioeconomic deprivation plot3 &lt;- tm_shape(spatialdatafile) + tm_fill(&quot;IMDSCORE&quot;, style = &quot;quantile&quot;, n = 7, palette = &quot;Reds&quot;) + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) # map for public transport accessibility categories (PTACAT) plot4 &lt;- tm_shape(spatialdatafile) + tm_fill(&quot;PTACAT&quot;, style = &quot;cat&quot;, palette = &quot;Blues&quot;) + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) # stitch the maps together using tmap_arrange() function tmap_arrange(plot1, plot2, plot3, plot4, nrow = 2) Visually, the income appears to be strongly correlated with house price. The patterns for socioeconomic deprivation on the other hand appears to have a negative correlation with house price. PTAs relationship is unclear. 8.2.3 Fitting a non-spatial Linear Regression on spatial data &amp; checking the residuals Next, we are going to fit a linear regression where the response variable is AVEPRICE and the predictors are AVEINCOME, IMDSCORE and PTACAT, and then extract the residuals from the model in order to test for spatial autocorrelation. When fitting a linear regression - we must test that the residuals have the following properties: The residuals should exhibit a normal distribution. Residuals must be homoscedasticity and exhibit a constant random when plotted against the fitted prediction The residual should not deviate too much away from the index line in the QQ-plot. IMPORTANT NOTEs:: Things that can violate the above requirements are: A skewed variable. It is best to transform using the log10() function, or in any scale that’s justifiable to normalise it. if your data is skewed then do a transformation in the models since only care about the residuals. Note that there is no right or wrong when it comes to implementing the transformation, as long as the assumption for the residuals from a linear regression are not violated then all is fine. If one of these characteristics are violated then its an indication that the data are not independent. This could possibly be due to some data artefact (i.e., a critical error in the data itself), or the residuals being correlated with each other. Presence of collinearity between residual points. Here, we should check first by mapping the residuals on a map to examine it’s spatial patterns for clustering and testing it with the Moran’s I test. Let’s demonstrate by using the built-in function lm() to create a simple linear or multivariable linear regression. # lm() function builds a regression model and stores model output into the object &#39;modelMLR&#39; modelMLR &lt;- lm(log10(AVEPRICE) ~ log10(AVEINCOME) + log10(IMDSCORE) + log10(PTAINDEX), data = spatialdatafile) # Include the &#39;scipen=7&#39; argument in the summary() function remove those annoying scientific notation! options(scipen = 7) # summary() calls report the output stored in object &#39;modelMLR&#39; summary(modelMLR) Call: lm(formula = log10(AVEPRICE) ~ log10(IMDSCORE) + log10(AVEINCOME) + log10(PTAINDEX), data = spatialdatafile) Residuals: Min 1Q Median 3Q Max -0.39249 -0.06489 -0.00572 0.06046 0.62993 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -4.100992 0.095592 -42.901 &lt; 2e-16 *** log10(IMDSCORE) 0.136713 0.007681 17.798 &lt; 2e-16 *** log10(AVEINCOME) 2.036354 0.019340 105.292 &lt; 2e-16 *** log10(PTAINDEX) 0.030055 0.004816 6.241 0.000000000471 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.1027 on 4964 degrees of freedom Multiple R-squared: 0.789, Adjusted R-squared: 0.7889 F-statistic: 6189 on 3 and 4964 DF, p-value: &lt; 2.2e-16 IMPORTANT NOTES: The above results presented in the above table indicates the relationship between the dependent and independent variable. Under the column for Estimate reports the overall intercept and coefficients for each independent variable. The p-values for the estimates are reported under the column Pr(&gt;|t|) which determines whether the relationship between the dependent and independent variables are statistically significant or not. Lastly, the other two important pieces of information is the Adjusted R-Squared value and the model’s p-value at the bottom. These tells us the performance of the model in general. The former tells you the percentage of variation explained in the house price when including AVEINCOME, IMDSCORE, PTAINDEX in the regression, while the latter informs us whether if this is significant or not. HOW TO INTERPRET RESULTS: This is how we fully interpret the coefficients and model performance from the above table: On a log transformed scale, if the AVEINCOME was to increase by 1.0%, we expect the house prices to increase by 2.04% and this average increase is statistically significant since the p-value = 0.00000000002 &lt;0.05. On a log transformed scale, if the PTAINDEX was to increase by 1.0%, we expect the house prices to increase marginally by 0.03%. The marginally increase is statistically significant since the p-value = 0.000000000471 &lt; 0.05. On a log transformed scale, if the IMDSCORE was to increase by 1.0%, we expect the house prices to increase marginally by 0.13% and this average increase is statistically significant since the p-value = 0.00000000002 &lt;0.05. In terms of model performance: according to the Adjusted R-Squared value 0.7889 (78.89%) of the variation in the house prices across LSOAs were explained by the model after accounting for AVEINCOME, IMDSCORE, PTAINDEX. Since the Adjusted R-Squared more than 50.0% it is hence a very good model and significant (i.e., p-value = 0.0000000002 &lt; 0.05). Now that we have fitted the model, we can extract the residuals and insert them as a new column into the spatialdatafile. To perform this action, use the modelMLR object and extract the residuals output from it. # Extract residuals from &quot;modelLMR&quot; object and dump into &quot;spatialdatafile&quot; and call the column &quot;RESIDUALS&quot; spatialdatafile$RESIDUALS &lt;- modelMLR$residuals # Reporting basic summary measures to have an idea of its distribution before plotting them on map summary(spatialdatafile$RESIDUALS) Let us generate a map to examine if these residuals show patterns of spatial autocorrelation. We have divergent values for the legends (i.e., negative and positive value) therefore it best to specify in the tm_fill() function that style = \"cont\" and the midpoint = 0, and a divergent colour scheme e.g. Reds to Blue (-RdBu). tm_shape(spatialdatafile) + tm_fill(&quot;RESIDUALS&quot;, style = &quot;cont&quot;, midpoint = 0, palette = &quot;-RdBu&quot;) + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) Notice the spatial patterning and clusters of the LSOAs and the over-prediction (i.e., areas that have negative residuals, or blue tones) and under-prediction (i.e., areas that positive residuals, or red tones). This visual inspection of the residuals is telling you that spatial autocorrelation may be present here. This, however, would require a more formal test. Now, let’s use the Moran’s I test to confirm the presence of spatial autocorrelation. Recall week 3’s lectures and computer labs session on spatial autocorrleation? Here, we create the spatial adjacency matrix and apply the Moran’s I test on the modelMLR object using the lm.morantest() function. #generate unique number for each row spatialdatafile$ROWNUM &lt;- 1:nrow(spatialdatafile) # We need to coerce the sf spatialdatafile object into a new sp object spatialdatafile_2.0 &lt;- as(spatialdatafile, &quot;Spatial&quot;) # Create spatial weights matrix for areas Weights &lt;- poly2nb(spatialdatafile_2.0, row.names = spatialdatafile_2.0$ROWNUM) WeightsMatrix &lt;- nb2mat(Weights, style=&#39;B&#39;) Residual_WeightMatrix &lt;- mat2listw(WeightsMatrix , style=&#39;W&#39;) # Run the test on the regression model output object &quot;modelMLR&quot; using lm.morantest() lm.morantest(modelMLR, Residual_WeightMatrix, alternative=&quot;two.sided&quot;) Global Moran I for regression residuals data: model: lm(formula = log10(AVEPRICE) ~ log10(IMDSCORE) + log10(AVEINCOME) + log10(PTAINDEX), data = spatialdatafile) weights: Residual_WeightMatrix Moran I statistic standard deviate = 56.28, p-value &lt; 2.2e-16 alternative hypothesis: two.sided sample estimates: Observed Moran I Expectation Variance 0.47489527088 -0.00060260241 0.00007138138 You will notice we obtained a statistically significant value (i.e., p-value &lt;0.001) for Moran’s I of value = 0.475. The value of the Moran’s I test somewhat high. This is an indication that the errors (the residuals) are somewhat related to each other and thus not independent. A spatial regression would be much appropriate for modelling this type of data since there’s evidence of spatial autocorrelation. 8.3 Spatial Regression Models 8.3.1 Model formation for spatial lag or error models At this point, we will introduce two kinds of spatial regressions models that can address the issues of spatial autocorrelation. These models are similar in a sense that they all require the inclusion of a spatial weight matrix to account for the spatial configuration of the areas under investigation. Spatial Lag Model lagged on the dependent variable Spatial Error Model Previously, we fitted a linear regression model that’s non-spatial, which takes the mathematical formula as follows: \\[y = \\beta_{0} + x_{1}\\beta_{1} + x_{2}\\beta_{2} + ... +\\epsilon\\] Here, \\(y\\) is the response variable (i.e., AVEPRICE). The \\(x_{1}\\), \\(x_{2}\\)., etc., are the independent variables (i.e, \\(x_{1}\\), \\(x_{2}\\) &amp; \\(x_{3}\\) are AVEINCOME, IMDSCORE and PTAINDEX respectively). \\(\\beta_{1}\\), \\(\\beta_{2}\\)., etc., are the estimated coefficients for the independent variables. The \\(\\epsilon\\) represents the uncorrelated error term. To make this a Spatial Lag Model lagged on the dependent variable, we tweak the above equation by including the spatial weight matrix \\(W\\) which is multiplied by the dependent variable \\(y\\). This product will have an estimated coefficient termed \\(\\rho\\). The \\(\\rho\\) parameter tells us the degree at which our observed outcome inside the study area of interest is influenced by outcomes measured from its neighbours. It’s model formulation is below: \\[y = \\rho Wy + \\beta_{0} + x_{1}\\beta_{1} + x_{2}\\beta_{2} + ... +\\epsilon\\] The Spatial Error Model, on the other hand, incorporates spatial weight matrix \\(W\\) into the error term, where \\(\\lambda\\) is an estimated coefficient for the product between \\(W\\) and \\(u\\), which \\(u\\) is a correlated spatial error term. It’s model formulation is below: \\[y = + \\beta_{0} + x_{1}\\beta_{1} + x_{2}\\beta_{2} + ...+ \\lambda Wu +\\epsilon\\] Here, we show you how to implement these two commonly used models to see which one better address the issue of spatial autocorrelation. But there are some important points: When implementing these models, we want to ensure that the spatial autocorrelation are accounted for, and therefore, we have to perform the Moran’s I test again. Here, we want to make sure that it is lower than what we observed for the linear regression model. We want to also compare the spatial model against the non-spatial model by checking the AIC values, the one with lowest is the better model. Previously, we were able to interpret the coefficients for the linear regression model. For the spatial models however, the coefficients derived from the model lagged on the dependent variable are difficult to interpret. Therefore, we have to estimate a quantity called impacts which we will use in the interpretation. This step is the most crucial part which must be done 8.3.2 Spatial Lag Model lagged on the dependent variable A Spatial Lag Model on the dependent variable assumes that dependencies exist directly among the levels of the dependent variable. That is, the observed outcome in one primary location is affected by other outcomes in nearby or neighbouring locations. For instance, if we implement this model on the LSOA house price, we are assuming that the property prices in one LSOA is impacted by the property prices from nearby neighbouring LSOAs. We can perform this analysis in four steps: Step 1: Fit the Spatial Lag Model with the dependent variable lagged using the lagsarlm() function. Step 2: Use the summary() function to report the results. Here, we are interested in the \\(\\rho\\) parameter &amp; its p-value. Here, we also want to check if the model is appropriate than a non-spatial model - examine the AIC (for lag versus LM) and the one with the lowest AIC is the better model. Step 3: Extract the residual lags for the model object and carry out a Moran’s I test using moran.mc() to ensure that the statistic is less than what was obtained for the Moran’s I test for the linear model. Use the tmap to examine its spatial patterning. Step 4: Interpretation of the parameters using the impact() function STEP ONE # Fit model using lagsarlm() # reuse spatial weight matrix created earlier as an object called &quot;Residual_WeighMatrix&quot; modelSLY &lt;- lagsarlm(log10(AVEPRICE) ~ log10(IMDSCORE) + log10(AVEINCOME) + log10(PTAINDEX), data = spatialdatafile_2.0, Residual_WeightMatrix) STEP TWO # Report results with summary() # We are interested in the rho-coefficient, log-likelihood ratio test&#39;s p-value and the AIC summary(modelSLY) Call:lagsarlm(formula = log10(AVEPRICE) ~ log10(IMDSCORE) + log10(AVEINCOME) + log10(PTAINDEX), data = spatialdatafile, listw = Residual_WeightMatrix) Residuals: Min 1Q Median 3Q Max -0.3608275 -0.0540603 -0.0039772 0.0518209 0.6492007 Type: lag Coefficients: (asymptotic standard errors) Estimate Std. Error z value Pr(&gt;|z|) (Intercept) -2.6649683 0.0924917 -28.8130 &lt; 2.2e-16 log10(IMDSCORE) 0.0435882 0.0068588 6.3551 0.0000000002083 log10(AVEINCOME) 1.2144821 0.0286833 42.3412 &lt; 2.2e-16 log10(PTAINDEX) 0.0106795 0.0041275 2.5874 0.009671 Rho: 0.4522, LR test value: 1354.5, p-value: &lt; 2.22e-16 Asymptotic standard error: 0.012282 z-value: 36.819, p-value: &lt; 2.22e-16 Wald statistic: 1355.6, p-value: &lt; 2.22e-16 Log likelihood: 4937.637 for lag model ML residual variance (sigma squared): 0.0077091, (sigma: 0.087801) Number of observations: 4968 Number of parameters estimated: 6 AIC: -9863.3, (AIC for lm: -8510.8) LM test for residual autocorrelation test value: 443.54, p-value: &lt; 2.22e-16 INTERPRETATION: The \\(\\rho\\) statistic informs us of how the neighbouring LSOA house price values affect the house price at \\(y\\). The \\(\\rho\\) value is a positive value of 0.4522 which means the neighbouring LSOAs affect is a positive manner, and it is statistically significant (i.e., p-value &lt; 0.05). We can see the AIC for the lag model is lower than the original linear regression model (i.e., Lag: -9863.3 vs LM: -8510.8) therefore the lag model is okay. IMPORTANT NOTE: In a lag model, do not even try to interpret the coefficients for the independent variables - ignore them and their p-values… they are nonsense! Why? This is because there is a global feedback effect happening here - i.e., whenever we change something in our own region (i.e., LSOA) for instance, like the AVEINCOME in a LSOA, that will not only affect our own house price, but when it causes the house price to go up in its own area, this in turn will cause the house prices to increase in its neighbour’s area; and when the neighbour’s house price go up - it is again going to affect our house price… so its an infinite loop. Instead, we interpret the result churn out from the impact function which reports their direct and indirect effects. STEP THREE # extract the residuals for modelSLY object and dump back to original sf spatialdatafile object spatialdatafile$RESID_SLY &lt;- modelSLY$residuals # use Moran&#39;s I test using moran.mc() function moran.mc(spatialdatafile$RESID_SLY, Residual_WeightMatrix, 1000, zero.policy = T) Monte-Carlo simulation of Moran I data: spatialdatafile$RESID_SLY weights: Residual_WeightMatrix number of simulations + 1: 1001 statistic = 0.13417, observed rank = 1001, p-value = 0.000999 alternative hypothesis: greater INTERPRETATION: The Moran’s I from the original model was 0.4748. Here, it is 0.1341 which is much lower thus the lag model has accounted for a lot of spatial autocorrelation although it still significantly remains. We can conclude that spatial lag model does address some of the issues of spatial autocorrelation in the model’s residuals but not all since it significantly positive. This is evidenced in the map output of the residual lags. IMPORTANT NOTE: We have to make a mental note of this and compare it with the performance of the Spatial Error Model. # generate the map tm_shape(spatialdatafile) + tm_fill(&quot;RESID_SLY&quot;, style = &quot;cont&quot;, midpoint = 0, palette = &quot;-RdBu&quot;) + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) STEP FOUR # Interpretation of results using impacts # impacts Weights_2.0 &lt;- as(Residual_WeightMatrix, &quot;CsparseMatrix&quot;) trMC &lt;- trW(Weights_2.0, type=&quot;MC&quot;) summary(impacts(modelSLY, tr = trMC, R=100), zstats=TRUE) Impact measures (lag, trace): Direct Indirect Total log10(IMDSCORE) 0.04550352 0.034066675 0.07957020 log10(AVEINCOME) 1.26784902 0.949188065 2.21703709 log10(PTAINDEX) 0.01114883 0.008346682 0.01949551 INTERPRETATION: Here is where we derive meaningful interpretation of the coefficients. A big table is churned out - all we care about is the first table titled: Impact Measures (lag, trace): and the last table titled: Simulated p-values. For instance, let’s interpret the log10(AVEINCOME)(on the log-scale), for the direct effects in its own LSOA, if the levels of income were to increase by 1%, this will cause an increase in the property prices by 1.267% (p &lt; 0.05) in its own LSOA. But for the indirect affects, if the log10(AVEINCOME) were to change across neighbouring LSOAs, this will affect the value of our house prices by 0.949% (p &lt; 0.05). The total column is the combined effect. 8.3.3 Spatial Error Models In a Spatial Error Model, we assume that the error terms are correlated across observations (i.e., the error of an observed value affects the errors of its neighbors). We essentially repeat the first 3 steps highlighted in section 3.2. for this analysis: Step 1: Fit the Spatial Error Model using the errorsarlm() function. Step 2: Use the summary() function to report the results for the \\(\\lambda\\) parameter and it’s p-value to check if the model is appropriate than a non-spatial one. You can also check with the AIC. Step 3: Extract the residuals errors and carry out a Moran’s I test using moran.mc() to ensure that the statistic is less than what was obtained for the Moran’s I test for the linear model. Use the tmap to examine its spatial patterning. STEP ONE modelSER &lt;- errorsarlm(log10(AVEPRICE) ~ log10(IMDSCORE) + log10(AVEINCOME) + log10(PTAINDEX), data = spatialdatafile_2.0, Residual_WeightMatrix) STEP TWO # Report results with summary() # We are interested in the rho-coefficient, log-likelihood ratio test&#39;s p-value and the AIC summary(modelSER) INTERPRETATION: The \\(\\lambda\\) statistic informs us that if there’s a sudden change in the error term for house prices in neighbouring LSOAs how did it impact the error term for the house price in our LSOA at \\(y\\). The \\(\\lambda\\) value is a positive value of 0.7221 which means the affect of neighbouring LSOAs are positive and the impact is statistically significant (i.e., p-value &lt; 0.05). We can see the AIC for the error model is lower than both the original linear regression &amp; lag model (i.e., Error: -10705.3 vs LM: -8510.8 &amp; Lag:-9863.3) therefore the error model better than the two. IMPORTANT NOTE: Unlike the lag model, we can interpret the coefficients from the error model for the independent variables! We can interpret them the same way we did for the linear regression model (see section 7.3.3.). STEP THREE # extract the residuals for modelSLY object and dump back to original sf spatialdatafile object spatialdatafile$RESID_SER &lt;- modelSER$residuals # use Moran&#39;s I test using moran.mc() function moran.mc(spatialdatafile$RESID_SER, Residual_WeightMatrix, 1000, zero.policy = T) INTERPRETATION: The Moran’s I from the original model was 0.4748. Here, it is -0.0579 which is negative and the lowest for the error model. On top of that there is no evidence of spatial autocorrelation since its p-value is not significant. Therefore, we can conclude that the spatial error model does address the issue of spatial autocorrelation in the residuals. Its a better model than the Linear regression and Lag model for exploring the relationship with those independent variables and accounting for spatial autocorrelation. This is also evidenced in the map output of the residual errors. # generate the map tm_shape(spatialdatafile) + tm_fill(&quot;RESID_SER&quot;, style = &quot;cont&quot;, midpoint = 0, palette = &quot;-RdBu&quot;) + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) 8.3.4 Using a Spatially lagged model based on independent variables The code below computes the spatially lagged model based on the independent variables. Briefly, the results are a quite tedious to interpret directly from the regression model. Hence, you will want to use the post estimation impacts() to get the direct, indirect and total coefficients from model: Click here Solutions modelSLX &lt;- lmSLX(log10(AVEPRICE) ~ log10(IMDSCORE) + log10(AVEINCOME) + log10(PTAINDEX), data = spatialdatafile_2.0, Residual_WeightMatrix) summary(modelSLX) IMPACTS_SLX &lt;- impacts(modelSLX, tr = trMC, R=100) IMPACTS_SLX 8.4 References (see reading list) Paper: Guangqing Chi and Jun Zhu (2008) Spatial Regression Models for Demographic Analysis, Popul Res Policy Rev, 27:17-42. DOI 10.1007/s11113-007-9051-8 Book Chapter: David Darmofal, (2015), Chapter Six: Spatial Lag and Spatial Error Models (2015). Social Analysis for the Social Sciences. Cambridge Press Gain Access to PDF via Institutional login Paper: Wen-Ching Wang, Yu-Ju Chang &amp; Hsueh-Ching Wang, (2019), An Application of the Spatial Autocorrelation Method on the Change of Real Estate Prices in Taitung City. Int Jour Geo-Information, (8)249, doi:10.3390/ijgi8060249 Online Tutorial: [R Programming] Reka Solymosi and Juanjo Medina (2022) Crime Mapping in R, Chapter 9: Spatial Regression Models Click link 8.5 Data Sources English indices for Multiple Deprivation (IMD) for 2019 [Source: UK Gov] Click Here UK Shape files for different geographic units [Source: Office for National Statistics, Open Geography Portal] Click Here The following indicators for averaged house prices, income and PTAL estimates were obtained from London DATASTORE 8.6 Useful videos Spatial Regression in R (Part One): The Four Simplest Models (Length: 00:40:36) [Watch on YouTube] "],["spatial-models-part-2.html", "9 Spatial Models: Part 2 9.1 Introduction 9.2 Implementing the Linear Regression model 9.3 Geographically Weighted Regression (GWR) 9.4 Tasks 9.5 Attributions 9.6 References (see reading list) 9.7 Data Sources", " 9 Spatial Models: Part 2 9.1 Introduction The goal for this week’s session is to introduce you to a type of spatial model known as the Geographically Weighted Regression (GWR). GWR is a statistical model which can indicate where non-stationarity may take place across space; it can be used to identify how locally weighted regression coefficients may vary across the study area (unlike its counterpart i.e., the Spatial Lagged and/or Error Models which provides global coefficients). Similar to last week’s sessions, we will first need to explore the residuals from a linear regression model to identify evidence of spatial autocorrelation before implementing a spatial model. But, this time round, we will run a GWR and observe how the coefficients for a set of independent variables vary across space. 9.1.1 Learning outcomes In this tutorial we will be using last week’s on the house price dataset in London, alongside the social-risk factor variables such as public transport accessibility (PTA), average income and socioeconomic deprivation (IMD) to see how their association with house prices vary across space. This will be achieved using the GWR model. 9.1.2 Datasets &amp; setting up the work directory We will be using the data from last week. You should have already downloaded all this data for last week’s practical lesson - if you have not done so already you can access them by clicking here. 9.1.3 Installing packages We will need to load the following packages: sf: Simple Features tmap: Thematic Mapping spdep: Spatial Dependence (Weighting schemes &amp; Spatial Statistics) sp: Package for providing classes for spatial data (points, lines, polygons and grids) # Load packages using library() function library(&quot;sf&quot;) library(&quot;tmap&quot;) library(&quot;spdep&quot;) library(&quot;sp&quot;) There is a new package we will need to install: spgwr: this library enable functions for computing geographically weighted regression models in RStudio. This is based on the work by Chris Brunsdon, Martin Charlton and Stewart Fotheringham. The spgwr package will need the following packages installed in the background for it to work: terra and spDataLarge car: this library enable functions for assessing multicollinearity among independent variables within a regression. A common test is the variance inflation factor (VIF) using the function vif() with threshold of 10. # install the packages using the install.package() install.packages(&quot;spgwr&quot;) install.packages(&quot;terra&quot;) install.packages(&quot;spDataLarge&quot;, repos=&quot;https://nowosad.github.io/drat/&quot;, type=&quot;source&quot;) install.packages(&quot;car&quot;) # load the packages with library() library(&quot;spgwr&quot;) library(&quot;car&quot;) You will see the following message after using the library() function spgwr package: NOTE: This package does not constitute approval of GWR as a method of spatial analysis; see example(gwr) You can ignore this message. 9.1.4 Loading datasets Remember, in last week’s practical, we used the London LSOA 2015 data.csv in RStudio to implement a spatial lag and error model. It contained the following the description for each column as follows: Column Name Description LSOACODE Unique identification code for the geographic area AVEPRICE (Dependent variable) Average house price estimated for the LSOA in 2015 AVEINCOME Estimated average annual income for households within an LSOA in 2015 IMDSCORE Deprivation score for an LSOA in 2015 PTAINDEX Measures levels of access/connectivity to public transport PTACAT PTAINDEX rendered into a categorical variable You were also provided two sets of spatial data, one that is LSOA-level required for the statistical analysis and the other for Boroughs which is for customising your map. The shapefile names are as follows: London LSOA shape file: London LSOA Areas.shp London Borough shape file: London Borough Areas.shp Use the following functions read.csv() and read_sf() to import the above datasets into RStudio’s memory. The codes are essentially the same as last week’s practical: # add house price and covariate data data.london &lt;- read.csv(&quot;London LSOA 2015 data.csv&quot;) # import shapefile data lsoa.shp &lt;- read_sf(&quot;London LSOA Areas.shp&quot;) borough.shp &lt;- read_sf(&quot;London Borough Areas.shp&quot;) The code chunk below generates an empty map with the tmap functions. It inspects the spatial configuration of London’s LSOA with the Boroughs superimposed. tm_shape(LSOAshp) + tm_polygons() + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) Output from the above tmap() functions: Use the merge() function to bring together the LSOA shapefile and house price dataset create a spatial data frame object. # Merge the two files using the &quot;LSOACODE&quot; column spatialdatafile &lt;- merge(lsoa.shp, data.london, by.x = &quot;LSOACODE&quot;, by.y = &quot;LSOACODE&quot;) 9.2 Implementing the Linear Regression model 9.2.1 Obtaining the residuals from a non-spatial model The GWR is a spatial regression model akin to the lag and error models taught last week. Similarly, in order to implement a GWR, we need to first test the residuals for evidence of spatial autocorrelation. To do this, we must first run a linear regression model get the residuals. Recall from last week, we can do this for the log-transformed house price against the independent variables (i.e., income, deprivation and accessibility) using the lm() function: # lm() function builds a regression model and stores model output into the object &#39;modelMLR&#39; modelMLR &lt;- lm(log10(AVEPRICE) ~ log10(AVEINCOME) + log10(IMDSCORE) + log10(PTAINDEX), data = spatialdatafile) # Include the &#39;scipen=7&#39; argument in the summary() function remove those annoying scientific notation! options(scipen = 7) # summary() calls report the output stored in object &#39;modelMLR&#39; summary(modelMLR) Call: lm(formula = log10(AVEPRICE) ~ log10(IMDSCORE) + log10(AVEINCOME) + log10(PTAINDEX), data = spatialdatafile) Residuals: Min 1Q Median 3Q Max -0.39249 -0.06489 -0.00572 0.06046 0.62993 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -4.100992 0.095592 -42.901 &lt; 2e-16 *** log10(IMDSCORE) 0.136713 0.007681 17.798 &lt; 2e-16 *** log10(AVEINCOME) 2.036354 0.019340 105.292 &lt; 2e-16 *** log10(PTAINDEX) 0.030055 0.004816 6.241 0.000000000471 *** --- Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 0.1027 on 4964 degrees of freedom Multiple R-squared: 0.789, Adjusted R-squared: 0.7889 F-statistic: 6189 on 3 and 4964 DF, p-value: &lt; 2.2e-16 For interpretation of the above global coefficients (see last week’s practical in section 7.3.3) You can check if presence of multicollinearity among the independent variable by using the vif() to ensure the independent variables are not co-linear with each other by ensuring their Variance Inflation Factor (VIF) is less than 10. If it exceeds 10, then those variables will have to be discarded from the model, and such regression will need to be re-run again without those discarded variables. vif(modelMLR) Output from vif() function: log10(AVEINCOME) log10(IMDSCORE) log10(PTAINDEX) 1.963519 2.066221 1.403051 All variables are not co-linear with each other since the VIFs are all less than 10. No need to discard any of the variables. Now, extract the residuals and deposit them into our spatial data frame spatialdatafile # Extract residuals from &quot;modelLMR&quot; object and dump into &quot;spatialdatafile&quot; and call the column &quot;RESIDUALS&quot; spatialdatafile$RESIDUALS &lt;- modelMLR$residuals Output shows mapped residuals: tm_shape(spatialdatafile) + tm_fill(&quot;RESIDUALS&quot;, style = &quot;cont&quot;, midpoint = 0, palette = &quot;-RdBu&quot;) + tm_shape(BOROUGHshp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 0.5, legend.text.size = 0.5) Notice the spatial patterning and clusters of the LSOA areas where there’s an over-prediction of the house prices (i.e., areas that have negative residuals, or blue tones) and under-prediction (i.e., areas that positive residuals, or red tones). This visual inspection of the residuals is an indication that spatial autocorrelation may be present. We can confirm by using an Moran’s I test. 9.2.2 Use residuals and test for spatial autocorrelation Create an adjacency spatial weight matrix apply Moran’s I test using the lm.morantest(): #generate unique number for each row spatialdatafile$ROWNUM &lt;- 1:nrow(spatialdatafile) # We need to coerce the sf spatialdatafile object into a new sp object spatialdatafile_2.0 &lt;- as(spatialdatafile, &quot;Spatial&quot;) # Create spatial weights matrix for areas Weights &lt;- poly2nb(spatialdatafile_2.0, row.names = spatialdatafile_2.0$ROWNUM) WeightsMatrix &lt;- nb2mat(Weights, style=&#39;B&#39;) Residual_WeightMatrix &lt;- mat2listw(WeightsMatrix , style=&#39;W&#39;) # Run the test on the regression model output object &quot;modelMLR&quot; using lm.morantest() lm.morantest(modelMLR, Residual_WeightMatrix, alternative=&quot;two.sided&quot;) Output from lm.morantest(): Global Moran I for regression residuals data: model: lm(formula = log10(AVEPRICE) ~ log10(AVEINCOME) + log10(IMDSCORE) + log10(PTAINDEX), data = spatialdatafile) weights: Residual_WeightMatrix Moran I statistic standard deviate = 56.28, p-value &lt; 2.2e-16 alternative hypothesis: two.sided sample estimates: Observed Moran I Expectation Variance 0.47489527088 -0.00060260241 0.00007138138 The Moran’s I value is 0.475, which is a statistically significant value (i.e., p-value &lt;0.001). This indicates strong evidence of spatial autocorrelation. Now, let’s see how we can use a different spatial model such as a GWR to derive local associations for each area. 9.3 Geographically Weighted Regression (GWR) GWR overcomes the limitation of the the standard linear, and spatial lag and error regression models of generating a global set of estimates. The basic idea behind GWR is to examine the way in which the relationships between a dependent variable and a set of predictors might vary over space. As explained in the lecture, the GWR operates by moving a search window from one regression point to the next, working sequentially through all the existing regression points in the dataset. A set of regions is then defined around each regression point and within the search window. A regression model is then fitted to all data contained in each of the identified regions around a regression point, with data points closer to the sample point being weighted more heavily than are those farther away. This process is repeated for all samples points in the dataset. For a data set of 4968 observations GWR will fit 4968 weighted regression models. The resulting local estimates can then be mapped at the locations of the regression points to view possible variations in the relationships between variables. 9.3.1 Preparing the data for GWR analysis The analysis requires points since the weights are distance-based and thus, to appropriately implement a GWR model on LSOA area data, we will need to calculate the centroids from the LSOAs and then deposit them as coordinates within the spatial data frame. # calculate the centroids from geometries spatialdatafile &lt;- st_centroid(spatialdatafile) # insert coordinates into spatialdatafile note longitude column is X and latitude column is Y spatialdatafile &lt;- cbind(spatialdatafile, st_coordinates(spatialdatafile)) 9.3.2 Fitting a GWR using gwr.sel() and gwr() Let demonstrate with an example using the Adaptive Bandwidth, which is the preferred approach since the algorithm will compute and specify the adaptive kernel that involves using varying bandwidth to define a region around regression points - instead of using some Fixed Bandwidth. Let’s find the optimal bandwidth using the Adaptive Bandwidth approach using gwr.sel() function: # finding the bandwidth BwG &lt;- gwr.sel(log10(AVEPRICE) ~ log10(AVEINCOME) + log10(IMDSCORE) + log10(PTAINDEX), data = spatialdatafile, coords = cbind(spatialdatafile$X, spatialdatafile$Y), adapt = TRUE) # see optimal bandwidth BwG The optimal bandwidth is 0.001270292 indicating the proportion of observations (or k-nearest neighbours) to be included in the weighting scheme. In this example, the optimal bandwidth indicates that for a given LSOA, 0.127% of its nearest neighbours should be used to calibrate the relevant local regression; that is about 6 LSOAs. The search window will thus be variable in size depending on the extent of LSOAs. Important note: Here the optimal bandwidth is defined based on a data point’s k-nearest neighbours. It can also be defined by geographical distance as done above for the fixed spatial kernel. We next fit a GWR based on an adaptive bandwidth using the gwr() function: # start timer to time how long it takes to run a gwr() on computer start.timer &lt;- proc.time() # gwr() model. You need hatmatrix and se.fit specified as TRUE for testing statistical significance gwr.model &lt;- gwr(log10(AVEPRICE) ~ log10(AVEINCOME) + log10(IMDSCORE) + log10(PTAINDEX), data = spatialdatafile, coords = cbind(spatialdatafile$X, spatialdatafile$Y), adapt=BwG, hatmatrix=TRUE, se.fit=TRUE) # end timer and calculate how it took for model to complete churning end.timer &lt;- proc.time() - start.timer # report time taken end.timer Output on time taken: user system elapsed 1490.684 96.123 1586.152 IMPORTANT NOTE: Due to the following options specified in the gwr() (i.e., hatmatrix and se.fit as TRUE) it might take sometime for the gwr() to complete the estimation of local coefficients, area-specific R2, and standard error. This take approximately 1490.684 seconds (24.84 minutes) on a desktop with 3 GHz 6-core Intel Core i5 processor with 32 GB of RAM memory. It will be interesting to see how long it takes on a standard UCL desktop or on your personal laptops. Here is the ideal time for you to have a second coffee break while it churns. # see results, finally! gwr.model Output of gwr.model object: Call: gwr(formula = log10(AVEPRICE) ~ log10(AVEINCOME) + log10(IMDSCORE) + log10(PTAINDEX), data = spatialdatafile, coords = cbind(spatialdatafile$X, spatialdatafile$Y), adapt = BwG, hatmatrix = TRUE, se.fit = TRUE) Kernel function: gwr.Gauss Adaptive quantile: 0.001270292 (about 6 of 4968 data points) Summary of GWR coefficient estimates at data points: Min. 1st Qu. Median 3rd Qu. Max. Global X.Intercept. -15.43999209 -4.26990561 -1.88765409 0.41755910 17.35599732 -4.1010 log10.AVEINCOME. -2.44598947 1.14890387 1.61696094 2.08452831 4.27148364 2.0364 log10.IMDSCORE. -0.94681986 -0.10975325 -0.00013244 0.12469522 1.08510758 0.1367 log10.PTAINDEX. -0.58629189 -0.07460266 -0.02198655 0.02452116 0.33555611 0.0301 Number of data points: 4968 Effective number of parameters (residual: 2traceS - traceS&#39;S): 1549.125 Effective degrees of freedom (residual: 2traceS - traceS&#39;S): 3418.875 Sigma (residual: 2traceS - traceS&#39;S): 0.07033289 Effective number of parameters (model: traceS): 1118.3 Effective degrees of freedom (model: traceS): 3849.7 Sigma (model: traceS): 0.06628063 Sigma (ML): 0.05834576 AICc (GWR p. 61, eq 2.33; p. 96, eq. 4.21): -11242.87 AIC (GWR p. 96, eq. 4.22): -13014.96 Residual sum of squares: 16.9122 Quasi-global R2: 0.9318326 Upon first glance, much of the outputs, especially the global coefficients, are identical to the outputs of the linear model. However, if we compare the Global R-square values we can see that GWR performs way better than the linear model (i.e, GWR: 0.9318 (93.18%) versus LM: 0.7889 (78.89%)). Let’s proceed to now report the various outputs of this model across each polygon. 9.3.3 Model results The results are always stored as a SDF object within the gwr.model output we generated from the gwr(). We can extract the SDF object according with the code below: gwr.data &lt;- as.data.frame(gwr.model$SDF) Very important notes about the gwr.data object: The following columns in the gwr.data contain our LSOA-specific coefficients for log-transformed income, deprivation and accessibility: log10.AVEINCOME., log10.IMDSCORE. and log10.PTAINDEX. respectively. These results tell us the association between the dependent and independent variable within an LSOA. The following columns in the gwr.data contain our LSOA-specific standard error estimates for log-transformed income, deprivation and accessibility: log10.AVEINCOME._se, log10.IMDSCORE._se and log10.PTAINDEX._se. These results helps us calculate a test statistic for assessing whether an association found between the dependent and independent variable in an LSOA is statistically significant or not. The following column localR2 in the gwr.data helps us to assess the model’s performance. Values close to 1 is an indication of a very good model and vice versa. We can generate these results as maps. Now, let us bring the results together into one clean spatial data frame: # create neat spatial data frame by keeping first two columns lsoa_result &lt;- lsoa.shp # insert coefficients into lsoa_result object lsoa_result$CoefLogInc &lt;- gwr.data[,&quot;log10.AVEINCOME.&quot;] lsoa_result$CoefLogIMD &lt;- gwr.data[,&quot;log10.IMDSCORE.&quot;] lsoa_result$CoefLogPTAL &lt;- gwr.data[,&quot;log10.PTAINDEX.&quot;] # insert standard errors into lsoa_result object lsoa_result$SELogInc &lt;- gwr.data[,&quot;log10.AVEINCOME._se&quot;] lsoa_result$SELogIMD &lt;- gwr.data[,&quot;log10.IMDSCORE._se&quot;] lsoa_result$SELogPTAL &lt;- gwr.data[,&quot;log10.PTAINDEX._se&quot;] # insert localR2 estimates into lsoa_result object lsoa_result$localR2 &lt;- gwr.data[,&quot;localR2&quot;] Using deprivation score, we report its associated impact on house prices across the LSOAs in London by mapping its LSOA-specific coefficients using the code: tm_shape(lsoa_result) + tm_fill(&quot;CoefLogIMD&quot;, title = &quot;Coefficient: Log(IMD) [%]&quot;, style = &quot;cont&quot;, midpoint = 0, palette = &quot;RdBu&quot;) + tm_shape(borough.shp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 1, legend.text.size = 1) Output from the above tmap() functions: Also use the summary() to help with the interpretation: summary(lsoa_result$CoefLogIMD) Output from the above summary() function: Min. 1st Qu. Median Mean 3rd Qu. Max. -0.9468199 -0.1097532 -0.0001324 0.0066443 0.1246952 1.0851076 INTEPRETATION: There is spatial variability in the relationship between our variable socioeconomic deprivation (transformed) and averaged house price (transformed) in London. The GWR outputs reveals that local coefficients range from a minimum value of -0.946 to a maximum value of 1.085, indicating that one percentage point increase in the levels of deprivation in LSOAs of London is associated with a reduction of 0.946% in house prices in some LSOAs and (weirdly) an increase of 1.085% in others. Broadly, the relationship are opposing. Now, while the above map offer some valuable insights to understand the spatial pattering of relationships, they do not identify whether these associations are statistically significant. They may or may not be. Roughly, for a sample that is sufficiently large - if take a coefficient estimate and divide it by its corresponding standard error to get an absolute value (i.e., t-score) that exceeds either -1.96 or +1.96, then it is statistically significant. We can easily compute estimates to determine significance: # compute t-score statistic lsoa_result$tstatIMD &lt;- lsoa_result$CoefLogIMD / lsoa_result$SELogIMD # create significance column with: &quot;Reduction: Significant&quot;, &quot;Not Significant&quot;, &quot;Increase: Significant&quot; lsoa_result$significant &lt;- cut(lsoa_result$tstatIMD, breaks=c(min(lsoa_result$tstatIMD), -2, 2, max(lsoa_result$tstatIMD)), labels=c(&quot;Reduction: Significant&quot;,&quot;Not Significant&quot;, &quot;Increase: Significant&quot;)) Now, let us report which relationship are significant or not by mapping the significance categories using the code: tm_shape(lsoa_result) + tm_fill(&quot;significant&quot;, title = &quot;&quot;, style = &quot;cat&quot;, labels=c(&quot;Reduction: Significant&quot;, &quot;Not Significant&quot;, &quot;Increase: Significant&quot;), palette = c(&quot;red&quot;, &quot;white&quot;, &quot;blue&quot;)) + tm_shape(borough.shp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 1, legend.text.size = 1) Output from the above tmap() functions: INTEPRETATION: For instance, in the Borough of Hounslow, we can see a significant reduction in house prices in relation to increased levels of socioeconomic deprivation (adjusted for income and accessibility). Such associations are clustered in the North-East and South-South West of Hounslow. The regions coloured white are not significant relationships and blues are a chance finding. Let finally map the local r-square values to examine model performance: # map localR2 to examine model performance tm_shape(lsoa_result) + tm_fill(&quot;localR2&quot;, title = &quot;Adaptive: Local R2&quot;, style = &quot;cont&quot;, midpoint = 0.5, palette = &quot;Spectral&quot;) + tm_shape(borough.shp) + tm_polygons(alpha = 0, border.alpha = 1, border.col = &quot;black&quot;) + tm_text(&quot;BOROUGHN&quot;, size = &quot;AREA&quot;) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(frame = FALSE, legend.title.size = 1, legend.text.size = 1) Output from the above tmap() functions: INTEPRETATION: The areas that are going towards the shade of dark reds are local regression models that have broadly performed poorly in its prediction for house price and its association with the three variables (income, deprivation and PTAL). Likewise, the areas that are going towards the shade of dark blues are local regression models that have broadly performed very well in its prediction for house price and its association with the three variables (income, deprivation and PTAL). 9.4 Tasks Map the local coefficients and significance categories for average income and PTAL. What is the interpretation for the spatial patterning and association with house prices in London? 9.5 Attributions This week’s practical was inspired from: Cheshire, J. &amp; Lansley, G. (2016). An Introduction to Spatial Data Analysis and Visualisation in R. (A) GWR tutorials were originally hosted on the CDRC website (Requires a log in account) LINK. (B) Direct link to the GWR tutorials posted by Professor James Cheshire as a Bookdown via his Github account LINK Rowe, F. &amp; Arribas-Bel, D. (2022). Spatial Modelling for Data Scientists, Chapter 9: Geographically Weighted Regression LINK 9.6 References (see reading list) Book: [R Programming] Brunsdon, C. et al (2018) An Introduction to R for Spatial Analysis and Mapping; Chapter 7: Spatial Attribute Analysis with R, (See pages 257 to 262) Click link (Note: Books can be borrowed from UCL’s Library) Book: [R Programming] Brunsdon, C. et al (2018) An Introduction to R for Spatial Analysis and Mapping; Chapter 8: Localised Spatial Analysis, (See pages 281 to 289) Click link (Note: Books can be borrowed from UCL’s Library) Book: [Theory] Lloyd, C.D., et al (2010) Spatial Data Analysis: An Introduction for GIS Users; Chapter 8: Exploring spatial patterning in data values, (See section 8.5.3. [Geographically Weighted Regression] on pages 115 to 123) Book: [R Programming] Roger S. Bivand, Edzer J. Pebesma and Virgilio Gomez-Rubio, (2008), Applied Spatial Data Analysis with R; Chapter 10: Modelling of Areal Data, (See section 10.5.3. [Geographically Weighted Regression] on pages 305 to 309) Paper [Theory] Comber, A. et al (2022) A Route Map for Successful Application of Geographically Weighted Regression; Geographical Analysis; https://doi.org/10.1111/gean.12316 Click link 9.7 Data Sources English indices for Multiple Deprivation (IMD) for 2019 [Source: UK Gov] Click Here UK Shape files for different geographic units [Source: Office for National Statistics, Open Geography Portal] Click Here The following indicators for averaged house prices, income and PTAL estimates were obtained from London DATASTORE "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
